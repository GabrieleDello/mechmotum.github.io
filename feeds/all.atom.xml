<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Laboratorium of Marvelous Mechanical Motum</title><link href="https://mechmotum.github.io/" rel="alternate"></link><link href="https://mechmotum.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mechmotum.github.io/</id><updated>2020-07-03T00:00:00-07:00</updated><subtitle>E pur si muove</subtitle><entry><title>A Web Application for Analyzing Bicycle Dynamics</title><link href="https://mechmotum.github.io/blog/bicycle-dynamics-web-application.html" rel="alternate"></link><published>2020-07-03T00:00:00-07:00</published><updated>2020-07-03T00:00:00-07:00</updated><author><name>Noah Sanders</name></author><id>tag:mechmotum.github.io,2020-07-03:/blog/bicycle-dynamics-web-application.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a web application to serve as a GUI for
bicycle dynamics.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/moorepants/BicycleParameters"&gt;BicycleParameters&lt;/a&gt;
Python program provides a way for users to interact with the 27 parameters
laid out by the Whipple-Carvallo bicycle model. However, its accessibility is limited
to the programming experience of the user, and it can be unweildy to manually work with.
To make the program more accessible, the Bicycle Dynamics Web App was created to supply
a graphical user interface for the program as well as to enable a broader range
of users to access it via the web. The web app takes heavy inspiration from &lt;a class="reference external" href="http://ruina.tam.cornell.edu/research/topics/bicycle_mechanics/JBike6_web_folder/index.htm"&gt;Jbike6&lt;/a&gt;,
but aims to remove the accessibility barriers inherent to MATLAB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-the-app"&gt;
&lt;h2&gt;Building the App&lt;/h2&gt;
&lt;p&gt;Given that BicycleParameters was to be used as the backend for the website, it made sense
to use another Python based program to build the frontend. &lt;a class="reference external" href="https://dash.plotly.com/"&gt;Dash&lt;/a&gt;
from Plotly serves this purpose perfectly, providing us with a full set of html components
in addition to many custom made Javascript elements such as datatables and value sliders.
Finally, the app is styled with &lt;a class="reference external" href="https://dash-bootstrap-components.opensource.faculty.ai/"&gt;Dash Bootstraps Components&lt;/a&gt;, so that only a very minimal
amount of custom CSS had to be written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functionality"&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;p&gt;The Bicycle Dynamics Web App provides a graphical interface with 10 different
default parameter sets, a set of editable tables where users may adjust the parameter
values as they see fit, and two plots which are generated behind the scenes
from the datatable values. The geometry plot displays the essential schematic and centers
of mass of the bicycle, while the eigenvalue plot reveals the self-stability of the bicycle
as a function of its speed. Users may toggle the centers of mass and intertia ellipsoid
on the geometry plot, and they may adjust the speed range for the eigenvalue plot.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/bicycle-dynamics-app.png" style="width: 800px;" /&gt;
&lt;p class="caption"&gt;Screenshot of the bicycle dynamics web app.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Bicycle Dynamics Web App is currently deployed at &lt;a class="reference external" href="https://bicycleparameters.herokuapp.com/"&gt;https://bicycleparameters.herokuapp.com/&lt;/a&gt;
and its github repository is located at &lt;a class="reference external" href="https://github.com/moorepants/BicycleParameters"&gt;https://github.com/moorepants/BicycleParameters&lt;/a&gt;. Feel free
to play around with the app and provide suggestions or feedback!&lt;/p&gt;
&lt;/div&gt;
</content><category term="software"></category><category term="bicycle"></category><category term="web application"></category></entry><entry><title>Developing a LibreTexts Editor Plugin For Inserting Executable Code Blocks</title><link href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html" rel="alternate"></link><published>2020-06-22T00:00:00-07:00</published><updated>2020-06-22T00:00:00-07:00</updated><author><name>Hao Huang</name></author><id>tag:mechmotum.github.io,2020-06-22:/blog/libretexts-jupyter-plugin.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a CKEditor plugin which could insert
executable code blocks&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the end of the Fall Quarter 2019 and Winter Quarter 2020, we focused on
building a &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder Plugin&lt;/a&gt; to be used on the
&lt;a class="reference external" href="https://libretexts.org"&gt;LibreTexts&lt;/a&gt; website to allow textbook authors to
insert executable code blocks. We intend for both textbook authors and readers
to have the ability to edit and run code blocks efficiently, making online
educational content more interactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-process"&gt;
&lt;h2&gt;Build Process&lt;/h2&gt;
&lt;p&gt;We started the project by &lt;a class="reference external" href="https://docs.google.com/document/d/1eV08l_4djKJ7bc8r0LPbD5bp3QT7mHTZgABUleH15H0/edit?usp=sharing"&gt;surveying&lt;/a&gt;
LibreTexts authors and readers on their most requested features.&lt;/p&gt;
&lt;div class="section" id="binderhub"&gt;
&lt;h3&gt;BinderHub&lt;/h3&gt;
&lt;p&gt;On the backend, the CKEditor Binder plugin utilizes a project called &lt;a class="reference external" href="https://binderhub.readthedocs.io/en/latest/"&gt;BinderHub&lt;/a&gt; to run code blocks. BinderHub
is developed as part of the Jupyter project and gives custom computing
environments based on a list of requirements specified through a GitHub
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thebelab"&gt;
&lt;h3&gt;Thebelab&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/minrk/thebelab"&gt;Thebelab&lt;/a&gt; and  &lt;a class="reference external" href="https://github.com/ines/juniper"&gt;Juniper&lt;/a&gt; are two examples of projects which can
insert code blocks into HTML pages and running them by requesting a kernel from
a computing backend like BinderHub. We found that Juniper had some better deign
elements; however, Thebelab was more actively maintained.  We deliberated on
which project to incorporate into our plugin, and decided to use Thebelab since
the recent commits indicated that any possible need for help would be more
promptly met. To incorporate some of the streamlined design elements of
Juniper, we planned on adding syntax highlighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-plugin"&gt;
&lt;h3&gt;Creating the plugin&lt;/h3&gt;
&lt;p&gt;Our plugin is based on the &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/"&gt;CKEditor 4&lt;/a&gt;, an open source “what you see
is what you get” text editor. This is the editor authors use on the LibreTexts
website.&lt;/p&gt;
&lt;p&gt;Our approach to this plugin is to make use of a &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/widget_sdk_intro.html"&gt;widget&lt;/a&gt;, on
the editor which allows us to place all the HTML elements of Thebelab together
as one unit. In other words the widget is a component made out of multiple
separate elements that are grouped together for easy formatting and movement;
however, individual parts can be altered independently. This allows for the
CKEditor instance to easily enforce the elements. Additionally, we created a
&lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/dev_howtos_dialog_windows.html"&gt;dialog window&lt;/a&gt;
for each code block so that users can modify each block whenever they want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mindtouch-specific-settings"&gt;
&lt;h3&gt;Mindtouch Specific Settings&lt;/h3&gt;
&lt;p&gt;One of the challenges we faced was working around Mindtouch, which sometimes
caused the plugin to function in unexpected ways. For reference, Mindtouch is
the web based wiki software that Libretexts uses and it uses a CKEditor. An
example of an obstacle we faced was that Mindtouch seemed to apply its own CSS
to the plugin.  This caused text overflow, addition of characters to the end of
each line, etc.  In order to resolve this, we added our own &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/tree/staging/src/styles"&gt;styling&lt;/a&gt;
to the plugin. If one wishes to use the CKEditor plugin on their own pages,
they can remove the extra styling in the folder.&lt;/p&gt;
&lt;p&gt;Another difference was JavaScript conflict. When we were trying to support
Jupyter Widgets, we found that it depended on Require.js. However, adding
Require.js to Mindtouch would break all the JQuery plugins. In order to fix all
the JavaScript conflicts, we created registerPlugin.js to include all Mindtouch
specific JavaScript code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="including-different-programming-languages"&gt;
&lt;h3&gt;Including different programming languages&lt;/h3&gt;
&lt;p&gt;During development, we used &lt;a class="reference external" href="https://github.com/binder-examples"&gt;environments developed by the Jupyter project&lt;/a&gt;. Using their Binder environments helped
us test and include different languages in our editor. Eventually we will
utilize, we would utilize the same &lt;a class="reference external" href="https://github.com/libretexts/default-env"&gt;default environment&lt;/a&gt; in our JupyterHub for our
editor. This default environment contains many packages that are commonly used
and requested by students and faculty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-actions"&gt;
&lt;h3&gt;Github Actions&lt;/h3&gt;
&lt;p&gt;We made use of Github Actions to automate two important tasks. After each push
on Github, it will trigger our custom linter to ensure code quality and
consistency. Additionally, if we push any code to the master branch, it will
trigger an automatic deploy to production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-capabilities"&gt;
&lt;h2&gt;CKEditor Capabilities&lt;/h2&gt;
&lt;p&gt;Currently authors publishing on the LibreTexts platform have the option to
insert executable code blocks using &lt;tt class="docutils literal"&gt;Octave&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Julia&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;R&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Python&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;. There is a possibility that other languages may be
added in the future. Authors can choose to either copy and paste their code
into the text editor, or directly code in the text editor as they would any
other one. To ensure that it is easy for the author as well as the reader of
the textbook to view the contents within the code block, as described in the
aforementioned section, syntax highlighting is made available via
&lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt; for all the languages except &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt; which is not supported
by &lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It is important to note that we suggest authors &lt;tt class="docutils literal"&gt;run&lt;/tt&gt; the sample &lt;tt class="docutils literal"&gt;Hello
World&lt;/tt&gt; print statement first to get the kernel started, once that is
successful, code can be added in the dialog box. For &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;, if the code has
already been &lt;tt class="docutils literal"&gt;run&lt;/tt&gt;, but the author wants to make any changes, they will need
to &lt;tt class="docutils literal"&gt;restart&lt;/tt&gt; the kernel in order to avoid an &lt;tt class="docutils literal"&gt;Interpreter Error&lt;/tt&gt; as any
variables will be assigned more than once in &lt;tt class="docutils literal"&gt;Binder&lt;/tt&gt; which is not allowed in
&lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Packages and libraries can be exported as they normally would; however, if an
author finds that a specific package or library that they would like to use is
not currently available they can make a request to have it added by either
sending an &lt;a class="reference external" href="mailto:jupyterteam&amp;#64;ucdavis.edu"&gt;email to the Jupyter Team&lt;/a&gt;, linked in
the dialog box, or &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/issues"&gt;open an issue&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Once the author is ready to insert the code block into their textbook page,
they have the option to either 'Insert with code and output,' 'Insert with code
only,' or 'Insert with output only.' Selection of any of these choices depends
on how the author intends to communicate the information provided in the code
block. If the code block has already been inserted into the page, and the
author wants to make any changes, they can simply double click on that section
and the dialog box will pop back up.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="GIF depicting an example page made using CKEditor" src="https://objects-us-east-1.dream.io/mechmotum/example-libretexts-jupyter-page.gif" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1: Example of what and author can do with CKEditor, and what the output will look like&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;As mentioned before, a long term goal is to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;default-env&lt;/span&gt;&lt;/tt&gt; for the
packages, this is the same environment that is used for the LIbreTexts-UCD
JupyterHub, and by&lt;/p&gt;
&lt;p&gt;using this, authors will have a greater selection of packages and libraries to
choose from, and it will also be easier for us to maintain. We also want to
improve the execution time of the code blocks, as currently requesting a kernel
involves downloading an image from DockerHub and creating a Docker container.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>The Laboratorium is Moving to TU Delft</title><link href="https://mechmotum.github.io/blog/moving-to-tudelft.html" rel="alternate"></link><published>2020-06-10T00:00:00-07:00</published><updated>2020-06-10T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2020-06-10:/blog/moving-to-tudelft.html</id><summary type="html">&lt;p class="first last"&gt;The lab is moving to TU Delft this summer.&lt;/p&gt;
</summary><content type="html">&lt;img alt="TU Delft Logo" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/tudelft-logo.png" /&gt;
&lt;p&gt;I am pleased to announce that I have accepted a position as an Assistant
Professor in the &lt;a class="reference external" href="https://www.tudelft.nl/en/3me/about/departments/biomechanical-engineering/"&gt;Biomechanical Engineering Department&lt;/a&gt; of the &lt;a class="reference external" href="https://www.tudelft.nl/en/3me/"&gt;Mechanical,
Maritime, and Materials Engineering (3mE) Faculty&lt;/a&gt; at &lt;a class="reference external" href="https://www.tudelft.nl"&gt;Delft University of
Technology&lt;/a&gt; where I will join the Biomechatronics &amp;amp; Human-Machine Control
group. At TU Delft I will be leading a research laboratory and effort focusing
on bicycle engineering and related technologies. I will be teaching courses in
dynamics, multibody dynamics, and computational engineering to compliment this
effort and support the students in the department and faculty.&lt;/p&gt;
&lt;p&gt;So, this means that the Laboratorium for Marvelous Mechanical Motum will be
moving with me to the Netherlands. Over the next few years the lab will be
reimagined as it merges with the existing TU Delft &lt;a class="reference external" href="http://bicycle.tudelft.nl/schwab/"&gt;Bicycle Dynamics Lab&lt;/a&gt;. The
primary initial topics of research will be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data driven vehicle and biomechanical modeling of the bicycle-rider system&lt;/li&gt;
&lt;li&gt;Data driven manual control characterization and identification in bicycle
balance and navigation&lt;/li&gt;
&lt;li&gt;Design and augmented/autonomous control for improvements in bicycling safety
and handling&lt;/li&gt;
&lt;li&gt;Development of the next generation of bicycle designs for improvements to
transportation&lt;/li&gt;
&lt;li&gt;Application of vehicle dynamics to influence transportation infrastructure
design&lt;/li&gt;
&lt;li&gt;Performance and safety improvements in the sport of cycling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are described more in the &lt;a class="reference external" href="https://github.com/moorepants/application-materials/blob/gh-pages/2019/tudelft/research-statement.pdf"&gt;research statement&lt;/a&gt; I developed for my
application and presented in the slides from the job talk below:&lt;/p&gt;
&lt;iframe
src="https://docs.google.com/presentation/d/e/2PACX-1vThi6LQvvs6Xw6AFr3HJTzGPSv2EOo5r1vSBlmqEsHK6WvDMqMKVi1DVMGm9U-rRspRPU76dCX33-DZ/embed?start=false&amp;loop=false&amp;delayms=3000"
frameborder="0" width="960" height="569" allowfullscreen="true"
mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;&lt;p&gt;I start the new position on August 1st, 2020; so look for changes and new
announcements as I ramp up activity. I'll soon be looking for TU Delft MSc
students for various projects and will be reaching out to researchers,
companies, and organizations in Europe to develop new collaborations. Feel free
to contact me if you are interested in working with me and the new lab.&lt;/p&gt;
&lt;p&gt;I am going to miss UC Davis. I've been here for the vast majority of the last
15 years and have learned so much from the faculty, students, and colleagues.
It is a bittersweet departure, but an exciting new adventure awaits!&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="biomechanics"></category><category term="control"></category><category term="education"></category><category term="engineering"></category><category term="sports"></category></entry><entry><title>Rowing Performance Estimation Paper Published</title><link href="https://mechmotum.github.io/blog/rowing-estimation-paper-published.html" rel="alternate"></link><published>2019-12-30T21:00:00-08:00</published><updated>2019-12-30T21:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-12-30:/blog/rowing-estimation-paper-published.html</id><summary type="html">&lt;p class="first last"&gt;Our 2019 rowing performance estimation paper is now published in Plos
One.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We've been working on this project and paper for two years and it was finally
published in Plos One on December 5, 2019. The citation is:&lt;/p&gt;
&lt;blockquote&gt;
Cloud B, Tarien B, Liu A, Shedd T, Lin X, Hubbard M, et al. (2019) Adaptive
smartphone-based sensor fusion for estimating competitive rowing kinematic
metrics. PLoS ONE 14(12): e0225690. &lt;a class="reference external" href="https://doi.org/10.1371/journal.pone.0225690"&gt;https://doi.org/10.1371/journal.pone.0225690&lt;/a&gt;&lt;/blockquote&gt;
&lt;a class="reference external image-reference" href="https://doi.org/10.1371/journal.pone.0225690"&gt;&lt;img alt="Screenshot of the Plos One paper." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/row-plos-screenshot.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;The abstract reads:&lt;/p&gt;
&lt;blockquote&gt;
Competitive rowing highly values boat position and velocity data for
real-time feedback during training, racing and post-training analysis. The
ubiquity of smartphones with embedded position (GPS) and motion
(accelerometer) sensors motivates their possible use in these tasks. In this
paper, we investigate the use of two real-time digital filters to achieve
highly accurate yet reasonably priced measurements of boat speed and
distance traveled. Both filters combine acceleration and location data to
estimate boat distance and speed; the first using a complementary frequency
response-based filter technique, the second with a Kalman filter formalism
that includes adaptive, real-time estimates of effective accelerometer bias.
The estimates of distance and speed from both filters were validated and
compared with accurate reference data from a differential GPS system with
better than 1 cm precision and a 5 Hz update rate, in experiments using two
subjects (an experienced club-level rower and an elite rower) in two
different boats on a 300 m course. Compared with single channel (smartphone
GPS only) measures of distance and speed, the complementary filter improved
the accuracy and precision of boat speed, boat distance traveled, and
distance per stroke by 44%, 42%, and 73%, respectively, while the Kalman
filter improved the accuracy and precision of boat speed, boat distance
traveled, and distance per stroke by 48%, 22%, and 82%, respectively. Both
filters demonstrate promise as general purpose methods to substantially
improve estimates of important rowing performance metrics.&lt;/blockquote&gt;
&lt;p&gt;Congratulations to everyone involved in making this happen! We hope this work
helps others progress in sports performance estimation and other related
topics.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Rowing performance estimation project team." src="https://objects-us-east-1.dream.io/mechmotum/row-research-team.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Research team members Li Wang, Ada Liu, Thomas Shedd, Paul Crawford, Britt
Tarien, and Bryn Cloud&lt;/p&gt;
&lt;/div&gt;
</content><category term="papers"></category><category term="rowing"></category><category term="sports"></category><category term="engineering"></category><category term="estimation"></category><category term="kalman filter"></category></entry><entry><title>Updated Implementation of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-implementation-updated.html" rel="alternate"></link><published>2019-12-30T15:00:00-08:00</published><updated>2019-12-30T15:00:00-08:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-12-30:/blog/ebike-controller-implementation-updated.html</id><summary type="html">&lt;p class="first last"&gt;Updated blog post on the implementation of a PID controller on an
instrumented ebike&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;em&gt;This is an updated version of a previous blog post on the implementation of a
PID controller on an instrumented ebike which can be&lt;/em&gt; &lt;a class="reference external" href="https://mechmotum.github.io/blog/ebike-controller-implementation.html"&gt;found here&lt;/a&gt;.
&lt;em&gt;Updates include sections 5.4-5.5 discussing the added dead man's switch and
throttle relay and minor fixes throughout.&lt;/em&gt;&lt;/p&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;1.0 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall goal of this project is to design and implement a cruise control
system for an instrumented ebike used for conducting bicycle handling
experiments. A previous blog post &lt;a class="reference external" href="https://mechmotum.github.io/blog/ebike-controller-design.html"&gt;(found here)&lt;/a&gt; outlines the design and analysis of a
continuous time PID controller for controlling the speed of the ebike. This
blog post tells the story of how the designed PID controller was implemented
digitally on the instrumented ebike through an Arduino Nano and how it fits
into the ebike cruise control system that was developed to make functional use
of the PID controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-operation-functionality"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of the cruise control system on the electric bike was
fundamentally informed by the interactions the user would have with the system.
A typical user interaction with the system is outlined in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="User Interaction." src="https://objects-us-east-1.dream.io/mechmotum/UserInteractionFlowChart.jpg" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A typical user interaction with the system.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This user interaction flowchart was used to help better understand the problem
of implementing the cruise control system and sculpt the concepts for the
hardware and software portions of the cruise control system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;3.0 System Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="control-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The control architecture is a simple negative feedback design that computes the
error between a user defined setpoint and the actual speed of the ebike. Figure
2 graphically shows how the control architecture is implemented on the ebike.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/BlogPost2ControlArchitecture.jpg" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Control architecture as implemented on the ebike.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="physical-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the heart of the cruise control system’s physical architecture is its
integration into the instrumented ebike’s powertrain. Figure 3 shows this
integration by highlighting the input/output and geometric relationships
between existing components of the ebike and the additional components needed
to implement the cruise control system.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="System Architecture." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemGeometricLayout.jpg" style="width: 75%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Geometric layout of the system components showing relative size,
location, information flow, and type of each component. Components called
out with a triangle are existing components on the ebike. Components called
out with a circle are components that are introduced to the ebike system to
implement the cruise control.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The fundamental interaction between the control system and the existing ebike
powertrain system occurs at the interface between the Arduino nano and the
ebike motor controller. While the cruise control is engaged, the function of
the Arduino is to take control of the throttle signal away from the user by
passing the calculated output of the control loop to the motor controller
instead of the throttle position commanded by the rider. When the cruise
control is disengaged, the Arduino simply reads the user commanded throttle
position and passes it directly to the motor controller. Figure 4, below,
graphically shows this interaction.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino's Main Function." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoThrottleSchematic.jpg" style="width: 40%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Schematic showing the Arduino’s function as a throttle emulator.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: Testing of the cruise control system has shown the implementation method
shown in Figure 4 to be inadequate while the cruise control is disengaged. The
time required for the Arduino to read and then write the signal it receives
from the throttle leads to unresponsive manual speed control while the cruise
control is disengaged. A fix to this issue is proposed in section 5.5 of this
blog post.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;4.0 Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The cruise control system software was written in C using the Arduino IDE.
Based on user inputs from two momentary pushbuttons, the software decides
whether or not to pass the throttle signal as an output or compute a throttle
output based on the PID controller. The software also updates the user on the
current status of the system via an LCD and logs diagnostic information to an
SD card.&lt;/p&gt;
&lt;p&gt;Figure 5, below, shows a high level view of the logic flow of the code.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Code Logic Flowchart." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemCodeLogicFlowChart.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Basic logic flowchart of the cruise control software.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Source code, and more details about it, can be found on the Laboratorium’s
Github repository &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="code-libraries"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The continuous time PID controller derived in part one of this blog post series
was digitized on the Arduino Nano using Brett Beauregard’s PID_v1 library
&lt;a class="reference external" href="https://github.com/br3ttb/Arduino-PID-Library"&gt;(found here)&lt;/a&gt;. This library
was developed by Brett to implement continuous time PID controllers on Arduino
microcontrollers.&lt;/p&gt;
&lt;p&gt;Brett’s library was chosen to implement the PID controller because of its many
robust features such as Derivative Kick and Initialization. Additionally, this
library contains fantastic documentation which can be &lt;a class="reference external" href="http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid slowing the code’s main loop, interrupts were used to manage the
change in setpoint brought on by a press of the speed increment decrement
buttons. Using interrupts free’s up the Arduino’s processor from having to
check whether or not there’s been a button press on every loop iteration.
Instead, the processor reacts to pin changes and interrupts the execution of
the main code to perform the function tied to the interrupt pin. However, the
Arduino Nano only has a limited number of pins that can be used as interrupts.
A library, written by GreyGnome &lt;a class="reference external" href="https://github.com/GreyGnome/PinChangeInt"&gt;(found here)&lt;/a&gt;, enables the use of interrupts
on any pin of the Arduino Nano. This library was used to free up pin real
estate for the many components that are wired up to the Arduino.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-hook-up-and-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="instrumented-ebike-platform"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jason Moore, the lab’s PI, originally began constructing the instrumented ebike
platform in 2009 from a large Surly single speed off road steel frame bicycle
converted to an ebike with a conversion kit sold by Amped Bikes. The Amped
Bikes kit consists of a brushless direct drive hub motor driven by a motor
controller and powered by a 36V Li ion battery. More information on the build
and the bike’s instrumentation system can be found in Jason’s dissertation
&lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Instrumented Ebike." src="https://objects-us-east-1.dream.io/mechmotum/TheInstrumentedEbike.JPG" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. The instrumented ebike today.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="electrical-hook-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The electrical components of the control system revolve around an Arduino Nano
which is the central processor for the hardware and logic of the cruise control
system. Table 1, below, shows a complete list of the hardware used in this
build.&lt;/p&gt;
&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;&lt;em&gt;Table 1. Table of components used in the control system. Prices and sources for each component can be found in the Bill of Materials in section 6.0.&lt;/em&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="40%"/&gt;
&lt;col width="40%"/&gt;
&lt;col width="20%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Component Name&lt;/th&gt;
&lt;th class="head"&gt;Details&lt;/th&gt;
&lt;th class="head"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Arduino Nano&lt;/td&gt;
&lt;td&gt;ATmega328P Processor&lt;/td&gt;
&lt;td&gt;Main   Processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wheel Speed Sensor&lt;/td&gt;
&lt;td&gt;DC generator in contact with rear tire &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;(Click here for more information)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Control Loop Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Voltage Divider&lt;/td&gt;
&lt;td&gt;Used to step down wheel speed sensor voltage to a range measurable by the Arduino&lt;/td&gt;
&lt;td&gt;Wheel Speed Sensor Signal Conditioning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pushbuttons&lt;/td&gt;
&lt;td&gt;Momentary pushbuttons to get user input&lt;/td&gt;
&lt;td&gt;User Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Battery&lt;/td&gt;
&lt;td&gt;7.2V NiCd&lt;/td&gt;
&lt;td&gt;System Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LCD&lt;/td&gt;
&lt;td&gt;16x2 character LCD&lt;/td&gt;
&lt;td&gt;User Feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Motor Controller&lt;/td&gt;
&lt;td&gt;Amped Bikes motor controller&lt;/td&gt;
&lt;td&gt;Control Loop Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SD Card Module&lt;/td&gt;
&lt;td&gt;SPI SD card module for Arduino&lt;/td&gt;
&lt;td&gt;Data Logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Arduino Nano and the voltage divider circuits were soldered to a small 3" x
1" piece of protoboard. Wires (22 AWG) were soldered to the protoboard to
connect the external components to the Nano. Figure 7 shows the completed
Arduino board.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Board." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoBoardWiredUp.JPG" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7. The Arduino board with wires attached.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With many of the components located on the handlebars, a majority of these
wires were routed together along the top tube, up the head tube and stretched
across to the handlebars. This task was facilitated using spiral wound cable
housings, zip ties, and a 15 pin Molex connector. Once on the handlebars, wires
were connected to header pins on the LCD and pushbuttons with Dupont
connectors.&lt;/p&gt;
&lt;p&gt;T-tap wire splices were used to cleanly splice power signals from the NiCd
battery above the Arduino near the top tube and from the wheel speed sensor
near the bottom bracket.&lt;/p&gt;
&lt;p&gt;A complete wiring schematic of the cruise control system can be found on the
laboratorium’s github &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="electronics-housings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Housings for the Arduino Nano, pushbuttons and LCD were designed and 3D printed
to enclose the electrical components and mount them to the ebike. Figure 8
shows the CAD model design of the Arduino housing. The housing’s design
includes pins for press fitting the Arduino stripboard to the mount. Slots on
the sides and top of the housing allow for wires to exit towards their
destinations on the ebike. Threaded inserts on the base are used to secure the
top cover using M3 screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Housing." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingDesign.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8. Arduino housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Arduino housing is clamped to the downtube of the ebike by a socket head
screw as shown in Figure 9.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Mounting." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingMountingPoints.JPG" style="width: 80%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9. Arduino housing mounting point.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Both the LCD and button housings were 3D printed and designed to mount to the
handlebars using a clamshell style mount used for securing GoPro cameras to
bikes. Each mount had a pair of “bunny ears" designed to interface with the
GoPro style mount. The LCD housing, shown in Figure 10 below, is a simple
rectangular two-piece enclosure joined by button head screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LCD Housing." src="https://objects-us-east-1.dream.io/mechmotum/LCDHousingDesign.jpg" style="width: 75%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 10. LCD housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similar to the LCD housing, the button housing is a two-piece, enclosure joined
by screws. Inside the housing is a small piece of protoboard that the
pushbuttons are soldered to. To make pressing the mini momentary pushbuttons
more convenient for the user, larger button parts were 3D printed and offset
from each mini momentary pushbutton using a compression spring as shown in
Figure 11 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingDesign.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 11. Button housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As shown in Figure 12, the button housing is mounted on the right side of the
handlebars near the throttle and brake lever for convenient access.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing Mount." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingPosition.JPG" style="width: 80%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 12. Button housing position on the handlebars.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dead-mans-switch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;5.4 Dead Man’s Switch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For safety reasons, a dead man’s switch was added to the cruise control system.
The dead man’s switch works by cutting power from the Li+ battery through a
mechanical relay. The relay’s coil is connected to a power circuit having a
Reed switch. The Reed switch is actuated by a magnet strapped to the rider’s
ankle. If the rider were to remove their ankle from the foot peg, separating
the ankle magnet from the Reed switch, power to relay’s coil would be
interrupted, opening the Li+ battery circuit. Sheet five of the master
electrical schematic shows how the switch is wired up to the ebike’s
powertrain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="throttle-relay-planned"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;5.5 Throttle Relay (Planned)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Currently, when cruise control is disengaged, the time it takes the Arduino to
read the throttle signal and then write it to the motor controller is leading
to a jerky ride. This is likely due to the intermittency in the throttle signal
output to the motor controller produced by the delay in reading and writing the
throttle signal through the Arduino. Placing a relay in line with the throttle
signal will provide a continuous signal flow to the motor controller by
eliminating the need to read and then write that signal when it passes through
the Arduino. A continuous signal flow will eliminate the intermittency issues
that make the bike feel jerky when the cruise control is disengaged.&lt;/p&gt;
&lt;p&gt;Current plans for the relay have it placed inline with the throttle signal wire
and switched by the Arduino through its digital write function. The proposed
changes to the wiring schematic and software can be found on the project’s
Github repository under the “relay” branch. Plans for the physical
implementation of the relay include placing the relay on a piece of protoboard
mounted to the bike’s top tube,inside the upper head tube triangle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bill-of-materials"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bill of Materials." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemBillofMaterials.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Table 2. Bill of materials (BOM) showing each part of project, where it was
purchased, what quantity was purchased and its cost.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="suggested-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;7.0 Suggested Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Throughout the implementation of this design, I've made note of some
improvements to the system's hardware design that could be made to address
known issues. I have listed these below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use a display that communicates via the SPI protocol to reduce the number of
wires used&lt;/li&gt;
&lt;li&gt;For the Arduino board, use a custom PCB and connectors to increase the
robustness of the board&lt;/li&gt;
&lt;li&gt;Implement a throttle relay (See section 5.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some avenues for improving the accuracy and precision of the cruise
control:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Set a faster sampling time in the PID Arduino library&lt;/li&gt;
&lt;li&gt;Replace DC generator wheel speed sensor with a rotary encoder for smoother
speed input (and preservation of the rear tire)&lt;/li&gt;
&lt;li&gt;Experiment with manual PID parameter tuning during outdoor testing to improve
output surging while cruise control is engaged&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank &lt;a class="reference external" href="https://github.com/ngchan"&gt;Nicholas Chan&lt;/a&gt; for writing
the camera gimbal software that my speed control software is based off of. I’d
also like to thank &lt;a class="reference external" href="https://github.com/br3ttb"&gt;Brett Beuaregard&lt;/a&gt; for writing
the PID library and it’s excellent documentation that is the heart of the speed
control software. Finally, I’d like to thank Jason Moore for his support and
mentorship throughout this project.&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="bicycle"></category><category term="engineering"></category><category term="controller implementation"></category><category term="arduino"></category></entry><entry><title>Slidedeck From Our Recent SacPy Talk</title><link href="https://mechmotum.github.io/blog/sacpy-slideck-2019.html" rel="alternate"></link><published>2019-11-17T00:00:00-08:00</published><updated>2019-11-17T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-11-17:/blog/sacpy-slideck-2019.html</id><summary type="html">&lt;p class="first last"&gt;Our slides from our November SacPy talk.&lt;/p&gt;
</summary><content type="html">&lt;iframe
src="https://docs.google.com/presentation/d/e/2PACX-1vQpprGVUh86uBUcpdQO-BD9-HQc0zit0vhf2O3z8Izs4aeYKcb8FxSX8gc43CeVM0-x_5JhIj03vRM0/embed?start=false&amp;loop=false&amp;delayms=3000"
frameborder="0" width="960" height="569" allowfullscreen="true"
mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;&lt;div class="figure align-center"&gt;
&lt;img alt="Celine presenting at SacPy." src="https://objects-us-east-1.dream.io/mechmotum/celine-sacpy.jpg" style="width: 800px;" /&gt;
&lt;p class="caption"&gt;Celine presenting at SacPy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="python"></category></entry><entry><title>Creating a Kubernetes Bare-Metal Cluster for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2019.html" rel="alternate"></link><published>2019-11-01T00:00:00-07:00</published><updated>2019-11-01T00:00:00-07:00</updated><author><name>Xin Luigi Chen</name></author><id>tag:mechmotum.github.io,2019-11-01:/blog/jupyter-summer-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub on a Kubernetes bare-metal cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the spring quarter and summer sessions, we focused on creating a
Kubernetes bare-metal cluster to deploy JupyterHub, BinderHub, and other
services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-cluster"&gt;
&lt;h2&gt;Virtual Machine Cluster&lt;/h2&gt;
&lt;p&gt;During spring quarter, Kevin and Celine worked on creating the bare metal
Kubernetes cluster. We first created a cluster of virtual machines (VMs) A
Linux test server served as the master node and host machine, while virtual
machines served as the child nodes. We used Vagrant to create these child nodes
and Ansible to provision them.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/dev-env"&gt;This folder in our main repository&lt;/a&gt; contains
instructions for setting up this development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bare-metal-cluster"&gt;
&lt;h2&gt;Bare-Metal Cluster&lt;/h2&gt;
&lt;p&gt;Our original bare-metal cluster consists of one master node named chick0 and 11
children named chick1 through chick10 sequentially. It also contains a
management node called rooster, which acts as a DHCP server, a TFTP server for
NetBoot and a proxy between the Internet and the Kubernetes cluster. The
Kubernetes cluster is under a private network, so the only way to access the
Kubernetes cluster is by connecting through rooster.&lt;/p&gt;
&lt;p&gt;The following diagram describes our networking setup.&lt;/p&gt;
&lt;img alt="Kubernetes diagram of cluster" src="https://objects-us-east-1.dream.io/mechmotum/kubediagram.png" style="width: 600px;" /&gt;
&lt;p&gt;The private network is under the &lt;tt class="docutils literal"&gt;10.0.0.0/8&lt;/tt&gt;. Kubernetes uses this network
for its resources to communicate.  Rooster has a public IP address of
&lt;tt class="docutils literal"&gt;128.120.136.26&lt;/tt&gt;, which serves multiple services based on the domain name
entered by the user.&lt;/p&gt;
&lt;p&gt;All servers are connected to a smart switch. The ZFS server is also connected
to the switch and provides persistent storage of JupyterHub users' files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.debian.org/PXEBootInstall#Preface"&gt;PXEBoot&lt;/a&gt; used a preseed
file and a DHCP server to install Ubuntu Server 18.04 on the servers more
efficiently. Each new server pulls the preseed and installation files via a
TFTP server set up on rooster.&lt;/p&gt;
&lt;p&gt;As done in the development environment, the nodes were provisioned using
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/ansible/playbooks"&gt;Ansible scripts&lt;/a&gt;.
Unlike the development environment, the bare-metal cluster &lt;a class="reference external" href="https://medium.com/&amp;#64;jain.sm/flannel-vs-calico-a-battle-of-l2-vs-l3-based-networking-5a30cd0a3ebd"&gt;uses Calico instead
of Flannel&lt;/a&gt;
for pod networking. This was chosen because Calico doesn't require software
bridges or IP tunneling like Flannel does. When communicating from pod to pod,
Flannel requires the pod's IP to be &amp;quot;packaged&amp;quot; in another IP (IP tunneling) to
send to the other pod. Calico, on the other hand, uses BGP protocol and
conserves the original pod IP.&lt;/p&gt;
&lt;p&gt;When we first setup our bare-metal cluster, we used rooster for our storage
needs by running a NFS server on it. Once we started getting ready for
production, we decided that we needed a more robust and redundant option for
our storage needs. With that in mind, we met with Mike and Dean, folks from the
Bioinformatics Core at the Genome Center here at UC Davis, to discuss the best
storage setup for our needs. After a couple of meetings, we came to the
conclusion that a ZFS setup would make the most sense, this decision was
reached mostly because of factors such as hardware already available and the
experience on ZFS that Dean and Mike brought to the table.&lt;/p&gt;
&lt;p&gt;Thanks to a retired ZFS server called the 'Hyperserver', we didn't have to
spend time and money ordering parts for our design. The 'Hyperserver' was quite
fitting of its name as it was a behemoth compared to the other nodes that we
were used to working with. The 'Hyperserver' was a 4U rack with enough slots in
the front to fit 24 drives, and 12 additional slots in the back for more. With
the help of Mike and Dean, we updated the firmware on the motherboard, drives,
and IPMI controller before we installed 24 storage drives in the front, and 2
RAID1 OS drives, 2 zil caches and 2 hot spares in the back. We used 4 stripes
of 6 drives each with raidz2 for our data storage drives, the goal was to
maximize speed and redundancy.  With raidz2, each stripe could lose a maximum
of 2 disks at once and the ZFS would still work. We then hooked up the ZFS to
our smart-switch where the Kubernetes network lives.  We made use of the
10Gib/s intel network card with a short range transceiver and 10M copper wire.
After we finished setting the ZFS server up, we renamed it to 'hen' to go along
with our naming theme for our cluster. Anyone can check out our extensive
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/ZFS.md"&gt;documentation&lt;/a&gt;
for more information regarding how we setup our ZFS.&lt;/p&gt;
&lt;p&gt;For security, we mainly followed the guide, &lt;a class="reference external" href="https://github.com/imthenachoman/How-To-Secure-A-Linux-Server"&gt;How to Secure a Linux Server&lt;/a&gt; written by
GitHub user &lt;a class="reference external" href="https://github.com/imthenachoman"&gt;iamthenachoman&lt;/a&gt;. Using the
guide, we implemented SSHing into rooster using only an SSH public/private key
pair, cleaned up short keys and UFW rules, and added intrusion detection for
iptables, SSH, and rootkits. You could find more information on our security
implementation in &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md#securing-the-cluster"&gt;this section&lt;/a&gt;
of our documentation.&lt;/p&gt;
&lt;p&gt;Later, we added more chicks and upgraded the RAM of almost all chicks. We
increased the number of worker nodes from 10 to 18, and upgraded the RAM on
most chicks from 16GB to 64GB. These efforts prepared the cluster for handling
new classes in the fall quarter.&lt;/p&gt;
&lt;p&gt;Our &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md"&gt;documentation&lt;/a&gt;
details our setup further and describes the actions taken to build the cluster
from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-jupyterhub"&gt;
&lt;h2&gt;Customizing JupyterHub&lt;/h2&gt;
&lt;p&gt;We made many modifications to JupyterHub, including redesigning the website,
adding new default environments, and more.&lt;/p&gt;
&lt;p&gt;JupyterHub pages is customizable using the &lt;a class="reference external" href="https://jinja.palletsprojects.com/en/2.10.x/templates/"&gt;Jinja2 templating system&lt;/a&gt; .  There are two
ways to add custom HTML files to JupyterHub (as described in &lt;a class="reference external" href="https://discourse.jupyter.org/t/customizing-jupyterhub-on-kubernetes/1769"&gt;this Discourse
post&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Through &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;InitContainers&lt;/a&gt; that
pull repositories of template files before the hub starts,&lt;/li&gt;
&lt;li&gt;Or through mounting &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"&gt;ConfigMaps&lt;/a&gt;
to the template file directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We chose the former option and have repositories for &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;custom HTML files&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-images"&gt;additional images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a screenshot of how the login page looks now.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub login page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubscreenshot.png" style="width: 600px;" /&gt;
&lt;p&gt;Additionally, more spawner options are included. We modified the default
environment to include many packages requested by professors and students. The
Dockerfile for the default environment is maintained in &lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;this repository&lt;/a&gt;.  The environment includes
Python 2 and 3, Octave, R, Julia, and SageMath.  The default environment mainly
installs software and packages via apt and conda for security reasons.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub spawner page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubspawner.png" style="width: 600px;" /&gt;
&lt;p&gt;The default environment includes Python 2 and 3, Octave, R, Julia, and
SageMath.  Note that SageMath requires Python 2, so changing the Python path
inside the SageMath configuration files is required. &lt;a class="reference external" href="https://bytesofcomputerwisdom.home.blog/2019/03/31/jupyter-notebook-running-the-wrong-python-version/"&gt;This article&lt;/a&gt;
contains more information on how this was accomplished. This fix is automated
in the Dockerfile.&lt;/p&gt;
&lt;p&gt;RStudio is also offered alongside JupyterLab, since deploying web applications
using packages such as &lt;tt class="docutils literal"&gt;shiny&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;shiny-dashboard&lt;/span&gt;&lt;/tt&gt; require RStudio and do
not run in Jupyter Notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-nuggets"&gt;
&lt;h2&gt;Interesting Nuggets&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Our Nginx server serves as a proxy to direct packets from public ips to ips
that metallb assigns to services on our cluster. When we setup HTTPS for
JupyterHub, Nginx started complaing as it would try to decrypt the traffic
meant for JupyterHub. We solved the problem by using the stream block, which
streams packet to the backend without trying to decrypt anything.&lt;/li&gt;
&lt;li&gt;A service on the cluster can be connected to a ingress controller(for example
Nginx) to make it accessible from outside the cluster. The ingress controller
is not to be confused with the Nginx proxy that we have running outside the
cluster, an ingress controller is a service running on Kubernetes that allows
host or URL based HTTP routing from outside the cluster to services on the
cluster.&lt;/li&gt;
&lt;li&gt;cert-manager is a very useful helm chart that can be deployed on Kubernetes
to automatically manage and issue TLS certificates from various issuing
sources. This alongside an ingress controller like Nginx can be a very useful
setup.&lt;/li&gt;
&lt;li&gt;Grafana and Prometheus is a good solution for setting up basic monitoring and
alerting on a Kubernetes cluster. They currently have a bug that erases all
the saved data when the Grafana pod is deleted for some reason. A workaround
is to save the json of the dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;In the future, we plan to create another cluster including, but not limited, to
the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having multiple master nodes and using two HAproxy servers instead of a
single Nginx server to avoid single points of failure.&lt;/li&gt;
&lt;li&gt;Assigning GPU's to different users.&lt;/li&gt;
&lt;li&gt;Assigning different networks based on organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>Electric Bicycle Speed Controller Presented at the 2019 Bicycle and Motorcycle Dynamics Conference</title><link href="https://mechmotum.github.io/blog/ebike-controller-bmd-presentation.html" rel="alternate"></link><published>2019-10-03T00:00:00-07:00</published><updated>2019-10-03T00:00:00-07:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-10-03:/blog/ebike-controller-bmd-presentation.html</id><summary type="html">&lt;p class="first last"&gt;Sharing the presentation of the speed controller project at the 2019
Bicycle and Motorcycle Dynamics Conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;From September 9th to the 11th, the design and implementation of the electric
bicycle speed controller project was presented in a poster exhibition hall
during the 2019 Bicycle and Motorcycle Dynamics Conference held in Padova,
Italy.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9883154.v1"&gt;Download the poster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9937091.v1"&gt;Download the paper&lt;/a&gt;.&lt;/p&gt;
</content><category term="blog"></category><category term="controls"></category><category term="BMD2019"></category><category term="engineering"></category></entry><entry><title>Practical Realization of a Theoretical Optimal-Handling Bicycle Results</title><link href="https://mechmotum.github.io/blog/practical-realization-of-a-theoretical-optimal-handling-bicycle-results.html" rel="alternate"></link><published>2019-10-03T00:00:00-07:00</published><updated>2019-10-03T00:00:00-07:00</updated><author><name>Anthony Toribio</name></author><id>tag:mechmotum.github.io,2019-10-03:/blog/practical-realization-of-a-theoretical-optimal-handling-bicycle-results.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the design and fabrication of a theoretically optimal
handling bicycle&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The goal of this research is to design and fabricate a theoretically optimal
lateral handling bicycle based on a dynamics based algorithm written by
Professor Moore. Lateral handling is quantified using the Handling Quality
Metric (HQM) where lower peak values indicate better handling. This
optimization algorithm takes into account physical bicycle properties including
geometry, mass, moments of inertia and speed. In particular, the geometry
defining the bicycle's trail, wheelbase, steer axis tilt, and front wheel
radius are optimized for the target speed.&lt;/p&gt;
&lt;p&gt;Our measure of lateral handling difficulty is the theoretical handling quality
metric (HQM). HQM is a function of frequency and quantifies the human control
effort needed to stabilize and direct a given bicycle based on quantifying the
rider's roll rate sensing activity. We then followed an iterative design
process to develop physically realizable wheels, frame, and fork that will
produce parameter values as close as possible to the target optimal parameter
values. We then fabricated and test rode the resulting bicycle.&lt;/p&gt;
&lt;p&gt;A theoretical target bicycle design has been found using the algorithm at a
speed of 3m/s with an HQM of 1.2 as compared to a standard bicycle's HQM of 7.8
at the same speed. Once a realizable model was created in CAD, the HQM was seen
to rise from 1.2 to 2.45. This value far surpasses the standard bicycle.
However, the fabrication of the design proved to be rather challenging. Issues
were encountered with tolerances and therefore error propagation as well as
issues with deflection under loading. These issues in combination created a
fabricated bicycle dissimilar to the original model. The fabricated bicycle
yielded an HQM with close-loop instability meaning that the handling could not
be evaluated using the algorithm.&lt;/p&gt;
&lt;p&gt;The bicycle was test ridden by Stasia and determined to have characteristics
described as &amp;quot;stable and effortless to ride when the intent is not to steer in
a particular direction&amp;quot;. Riding the bicycle felt &amp;quot;stable, as if you are sitting
in a cart&amp;quot;. Even though the bicycle is unstable in the algorithm, a real rider
can control it. For more information on the current status of this research,
please see the attached paper and media below. Future work on this research
will be to evaluate the handling of the bicycle both subjectively and
objectively.&lt;/p&gt;
&lt;p&gt;Paper: &lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9883328.v1"&gt;https://doi.org/10.6084/m9.figshare.9883328.v1&lt;/a&gt;&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3ms Fabricated." src="https://objects-us-east-1.dream.io/mechmotum/3ms-fabricated.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Fabricated model of optimal bicycle for 3 m/s.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3ms Fabricated Rider." src="https://objects-us-east-1.dream.io/mechmotum/3ms-fabricated-rider.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Fabricated model of optimal bicycle for 3 m/s with rider.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/oDPssZu9Uso" frameborder="0"
allow="accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="research"></category><category term="bicycle"></category><category term="design"></category><category term="handling qualities"></category><category term="control"></category><category term="optimization"></category><category term="fabrication"></category></entry><entry><title>Creating Linux Servers for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-winter-2019.html" rel="alternate"></link><published>2019-05-03T00:00:00-07:00</published><updated>2019-05-03T00:00:00-07:00</updated><author><name>Celine Liang</name></author><id>tag:mechmotum.github.io,2019-05-03:/blog/jupyter-winter-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub for a future computing cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a class="reference external" href="libretexts-grant.rst"&gt;$5M grant&lt;/a&gt; awarded to the LibreTexts
project last year, our team had two goals: to integrate Jupyter into the
LibreTexts website and to create a computing cluster running JupyterHub to
serve LibreTexts and UC Davis users. This quarter, we focused on researching
how to create the cluster through building test servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-environment"&gt;
&lt;h2&gt;Virtual Machine Environment&lt;/h2&gt;
&lt;p&gt;The first step in our journey to building a cluster was to familiarize
ourselves with how to setup a single server. It was crucial for us to really
understand all the details on how to setup a single server, as we would need
the knowledge to setup each and every single node in the cluster. We decided to
use VirtualBox as our starting playground so we had an easily disposable
environments to learn from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raid1-and-lvm"&gt;
&lt;h2&gt;RAID1 and LVM&lt;/h2&gt;
&lt;p&gt;We started adding more features to the installations that we would eventually
use in our cluster configuration. We started by adding a software RAID1 to our
installations to familiarize ourselves with the process, and then we moved on
to adding LVM too.&lt;/p&gt;
&lt;p&gt;Redundant Array of Independent Disks, also known as RAID, provides multiple
ways of orchestrating and synchronizing multiple hard drives in a computer
network to establish reliable data storage within the network. We decided to
use RAID1, which consists of an exact copy of a set of data on two or more
disks. We chose RAID1 because it allows us to switch a drive while the server
is live, in case a drive fails.&lt;/p&gt;
&lt;p&gt;Logical Volume Manager, also known as LVM, is a device mapper target that
provides logical volume management for the Linux kernel. The benefits of using
LVM is the ability to use and manage &amp;quot;dynamic partitions&amp;quot;. When using LVM
&amp;quot;partitions&amp;quot;, known just as logical volumes, we can manage them very easily
through the command line if we wanted to either create additional partitions,
or resize/delete any existing partitions.&lt;/p&gt;
&lt;p&gt;While installing Ubuntu Live Server 18.04 with RAID1, we ran into an issue
where the server failed to start. According to the &lt;a class="reference external" href="https://wiki.ubuntu.com/BionicBeaver/ReleaseNotes#Server_installer"&gt;Ubuntu 18.04.02 Release
Notes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The next generation Subiquity server installer, brings the comfortable live
session and speedy install of Ubuntu Desktop to server users at last.&lt;/p&gt;
&lt;p&gt;N.B., If you require multipath, full-disk encryption, or the ability to
re-using existing partitions, you will want to continue to use the alternate
installer which can be downloaded from
&lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04/release/"&gt;http://cdimage.ubuntu.com/releases/18.04/release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As of 18.04.1, the Subiquity server installer now supports LVM, RAID, vlans,
and bonds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After some researching, we learned however that &lt;a class="reference external" href="https://bugs.launchpad.net/subiquity/+bug/1785332"&gt;a bug&lt;/a&gt; from the Ubuntu Live
Server image caused the installer to fail to mount the boot partition,
preventing the installation of Ubuntu on RAID1. We instead used this &lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04.2/release/ubuntu-18.04.2-server-amd64.iso"&gt;alternate
installer (non-live server image file)&lt;/a&gt;
to successfully install Ubuntu Server 18.04 with RAID1 on the virtual machines.&lt;/p&gt;
&lt;p&gt;When installing Ubuntu Server with RAID1 and LVM on our virtual machines, we
did not allot enough space on our hard disks for the operating system and
JupyterHub combined. We determined that in total, the operating system and
JupyterHub required about 15 GB of storage. To be safe, we now recommend to
create two 20 GB virtual hard disks for setting up JupyterHub.&lt;/p&gt;
&lt;p&gt;Our individual setups varied between each test server. In one successful setup,
each hard disk contained two partitions. One partition contained 2.0 GB and was
mounted on &lt;tt class="docutils literal"&gt;/boot&lt;/tt&gt; as the boot partition. The other partition contained 19.5
GB, serving as primary storage.&lt;/p&gt;
&lt;p&gt;We plan to have a stack of Ubuntu 18, RAID1, and LVM as our standard setup for
each node in the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterhub-bare-metal"&gt;
&lt;h2&gt;JupyterHub Bare-Metal&lt;/h2&gt;
&lt;p&gt;Our next step was trying to setup a bare-metal verion of JupyterHub in our
virtual machines.  We followed the instructions provided in the repository,
&lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching"&gt;jupyterhub-deploy-teaching&lt;/a&gt;, to install
JupyterHub on our virtual machines and connect to it through the browser. The
repository is a &amp;quot;light fork&amp;quot; from the JupyterHub's &lt;a class="reference external" href="https://github.com/jupyterhub/jupyterhub-deploy-teaching"&gt;original
jupyterhub-deploy-teaching&lt;/a&gt; repository,
intended for UC Davis usage.&lt;/p&gt;
&lt;p&gt;We ran into a few issues during the installation process.  The Ansible script
in the repository was missing some required installations.  The package
&lt;cite&gt;python3-distutils&lt;/cite&gt; is required by JupyterHub but was not installed. The
package was a part of Ubuntu 16.04, so the Ansible script did not need to
specify installing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-disutils&lt;/span&gt;&lt;/tt&gt; previously. This was fixed in the
Ansible Playbook via &lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching/commit/51b070a9ae3223d1919ec56323411ef455d642e5"&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also encountered Conda errors while installing JupyterHub. We suspect that
this is due to the submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository, which are fixed by running their updates in our automatic
configuration and deploying script, &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After succeeding in setting up JupyterHub on our virtual machines, we
incorporated the changes into the configuration files and completed
&lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; to automate the installation process, testing it to make sure that
it worked. The script &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; automates the following configuration tasks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adds submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository.&lt;/li&gt;
&lt;li&gt;Adds the current user to as an admin and user.&lt;/li&gt;
&lt;li&gt;Generates a proxy_auth_token and inputs it into the configuration file.&lt;/li&gt;
&lt;li&gt;Generates a self-signed SSL certificate and cookie secret.&lt;/li&gt;
&lt;li&gt;Names the &lt;cite&gt;hosts&lt;/cite&gt; and &lt;cite&gt;jupyter_hosts&lt;/cite&gt; files properly from &lt;cite&gt;hosts.example&lt;/cite&gt;
and &lt;cite&gt;jupyter_hosts.example&lt;/cite&gt; respectively.&lt;/li&gt;
&lt;li&gt;Runs Ansible Playbook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Users can now save time by running the script to configure and deploy
JupyterHub, rather than complete the above tasks manually. Using the script
should be less error-prone compared to the manual setup.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>Laboratorium Represented at the UC Davis Undergraduate Research Conference</title><link href="https://mechmotum.github.io/blog/urc-2019.rst.html" rel="alternate"></link><published>2019-04-30T00:00:00-07:00</published><updated>2019-04-30T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-04-30:/blog/urc-2019.rst.html</id><summary type="html">&lt;p class="first last"&gt;Bryn Cloud and Trevor Metz Presented at the 2019 UC Davis
Undergraduate Research Conference&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Two of the undergraduate researchers in the Laboratorium presented their past
year's work at the UC Davis Undergraduate Research Conference on April 26,
2019. Congratulations on this accomplishment!&lt;/p&gt;
&lt;div class="section" id="design-of-an-electric-bicycle-speed-controller"&gt;
&lt;h2&gt;Design of an Electric Bicycle Speed Controller&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Trevor Metz standing beside his poster at the conference." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-metz-photo.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Trevor Metz beside his poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Trevor Metz's poster." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-metz-poster.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Trevor Metz's poster. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/urc2019-poster-metz.pdf"&gt;[Download bicycle poster PDF]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="smartphone-based-sensor-fusion-for-estimating-rowing-kinematic-metrics"&gt;
&lt;h2&gt;Smartphone-based Sensor Fusion for Estimating Rowing Kinematic Metrics&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bryn Cloud standing beside her poster at the conference." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-cloud-photo.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Bryn Cloud beside her poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bryn Cloud's poster." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-cloud-poster.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Bryn Cloud's poster. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/urc2019-poster-cloud.pdf"&gt;[Download rowing poster PDF]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="conferences"></category><category term="sports"></category><category term="biomechanics"></category><category term="rowing"></category><category term="bicycles"></category></entry><entry><title>Ski Jump Design Software to Analyze User Inputted Jumps</title><link href="https://mechmotum.github.io/blog/skijumpdesign-analysis.html" rel="alternate"></link><published>2019-04-18T00:00:00-07:00</published><updated>2019-04-18T00:00:00-07:00</updated><author><name>Bryn Cloud</name></author><id>tag:mechmotum.github.io,2019-04-18:/blog/skijumpdesign-analysis.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on adding page to skijumpdesign app to analyze user inputted
ski jumps for equivalent fall height.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The goal of this work is to add a new page to the &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;Ski Jump Design Tool&lt;/a&gt;
that allows users to input a measured jump profile and get a depiction of
the equivalent fall height (EFH) for their jump. Figure 1 illustrates the
components of a terrain park using common terminology.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Terminology." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-01.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Components of standard terrain park jump from [Levy]_.
Reprinted with the author's permission.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The software is designed for users with little to no technical background,
and guides the users through correct implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calculating-equivalent-fall-height"&gt;
&lt;h2&gt;Calculating Equivalent Fall Height&lt;/h2&gt;
&lt;p&gt;The theory of equivalent fall height calculations has been discussed by &lt;a class="citation-reference" href="#levy" id="id1"&gt;[Levy]&lt;/a&gt;.
EFH can be expressed as follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
h = \frac{v_j^2sin^2(\theta_J - \theta_L)}{2g}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(v_j\)&lt;/span&gt; is the jumper's landing speed, &lt;span class="math"&gt;\(\theta_J\)&lt;/span&gt; is the
jumper's landing angle, &lt;span class="math"&gt;\(\theta_L\)&lt;/span&gt; is the slope angle and &lt;span class="math"&gt;\(g\)&lt;/span&gt; is
gravity. This calculation was added to the skijumpdesign software to evaluate
the EFH of any surface. A takeoff angle, skier instance, and a takeoff point
relative to the surface are user inputs to the function. Then, the function
uses these inputs to find the skier's impact velocity at each point along the
surface and extracts the skier's landing speed and landing angle. The slope
angle is calculated using the slope along the surface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="measuring-a-jump-s-profile"&gt;
&lt;h2&gt;Measuring A Jump's Profile&lt;/h2&gt;
&lt;p&gt;A jump has been measured using the three following methods.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use a tape measure and level to find the surface distance and angle at
defined points along the jump. Then, convert the values to planar Cartesian
coordinate system that lies on the jumps cross section.&lt;/li&gt;
&lt;li&gt;Mount a high precision differential GPS to a snowboard and slowly walk the
snowboard along the jump.&lt;/li&gt;
&lt;li&gt;Mount a differential GPS on a helmet and have a skier ski along the jump as
slowly as possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We spent time this quarter testing the latter. A Piksi differential GPS system
was used for the experiments. This system uses two receivers, the base and the
rover, and calculates the relative position between the two. This referencing
allows the differential GPS to have a one centimeter accuracy. The GNSS antenna
was mounted to a bike helmet by drilling a hole through the top and fastening
it down with a nut and bolt. The cable that connects the antenna to the rover
evaluation board was fed down the profile of the helmet and into a backpack.&lt;/p&gt;
&lt;p&gt;Preliminary tests were gathered using the helmet/backpack setup while a rider
biked around a neighborhood in Davis. We found that while the rider was biking,
there were a lot of obstructions that would make the rover and base station
lose their fixed position when they were more than ~400 meters apart. This
meant that we were still able to locate the rover, but it had a less accurate
reading. We felt confident that we could maintain a fixed, accurate position
for at least 350 meters, so we spent the next weekend testing the setup at
Sierra at Tahoe ski resort.&lt;/p&gt;
&lt;p&gt;The skier went down four different jumps while the recorder was with the base
station left at the bottom of the resort. After the recorder started recording,
the skier slowly rode up the takeoff of the jump. Once at the top of takeoff,
the skier stopped and side stepped the takeoff lip. This method was used so
that it is easier to take note of where the takeoff point of the jump is when
we analyzed the data. After the sidestep, the skier stepped off the takeoff lip
and slowly rode down the landing profile. We tested 2 jump lines, one
approximately 200 meters from the base station, and one 1000 meters from the
base station. We found that the differential GPS accurately measured at both
locations, which was a pleasant surprise after the testing on a bike. This data
shows promise for this jump profiling method. Figure 2 shows me (the skier)
with the differential GPS ski helmet, and the backpack strapped to my chest.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Differential GPS Skier Helmet." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-02.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. A differential GPS mounted to a helmet for testing at Sierra at Tahoe.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ski-jump-application-update"&gt;
&lt;h2&gt;Ski Jump Application Update&lt;/h2&gt;
&lt;p&gt;The new version of the ski jump web application has launched and is available
at &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;. A home page was added to keep it user
friendly. This is shown below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Tool Home Page." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-03.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. New Ski Jump Web Application - Home Page.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The buttons centered in the middle of this page will direct users to the ski
jump design or the new analysis page shown in Figure 4.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Tool Analysis." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-06.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. New Ski Jump Web Application - Analysis Page.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;An example of a jump designed with a takeoff angle of 10 degrees and maximum
equivalent fall height of 0.8 m is displayed when the page is loaded. The user
can see the jump profile, EFH value, and knee collapse and possible soft
landing EFH values. The calculation shows a constant EFH value of 0.8 m until
it reaches the landing transition surface. Instead, the ski jump design app
limits the acceleration felt by the skier - which is the reason for the spike
in EFH.  From there, the user can scroll down to the input box to upload their
own jump. This input box is shown in Figure 5 with a sample csv file uploaded.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Analysis Input Box." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-07.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Analysis Page Input Box.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A function was added to the skijumpdesign software to calculate the equivalent
fall height of a surface. A differential GPS mounted on a skier's helmet is a
promising way to measure a jump profile because it is portable and efficient.
The ski jump web application has expanded to showcase three pages: a home page,
design page, and analysis page. Further work is needed to speed up the
calculations, determine the best methods for users to measure a jump, and make
the new web app user friendly.&lt;/p&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web application: &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/moorepants/skijumpdesign"&gt;https://gitlab.com/moorepants/skijumpdesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software documentation: &lt;a class="reference external" href="http://skijumpdesign.readthedocs.io"&gt;http://skijumpdesign.readthedocs.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="levy" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[Levy]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Levy, D., Hubbard, M., McNeil, J.A. et al. Sports Eng (2015) 18: 227.
&lt;a class="reference external" href="https://doi.org/10.1007/s12283-015-0182-6"&gt;https://doi.org/10.1007/s12283-015-0182-6&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="ski"></category><category term="sports"></category><category term="engineering"></category><category term="safety"></category></entry><entry><title>Implementation of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-implementation.html" rel="alternate"></link><published>2019-04-05T00:00:00-07:00</published><updated>2019-04-05T00:00:00-07:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-04-05:/blog/ebike-controller-implementation.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the implementation of a PID controller on an
instrumented ebike&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;em&gt;This blog post has been updated in a newer blog post. Please see the updated version of this blog post for the most up to date information.&lt;/em&gt;&lt;/p&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;1.0 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall goal of this project is to design and implement a control system
for an instrumented ebike used in bicycle handling experimentation. A previous
blog post found &lt;a class="reference external" href="ebike-controller-design"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;outlines the design and analysis of a PID controller that meets the steady
state error goal of +/- 0.1m/s. This blog post tells the story of how the
designed PID controller was implemented on the instrumented ebike using an
Arduino Nano.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-operation-functionality"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of the PID controller on the electric bike was fundamentally
informed by the interactions that the user would have with the system. A
typical user interaction with the system is outlined in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="User Interaction." src="https://objects-us-east-1.dream.io/mechmotum/UserInteractionFlowChart.jpg" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A typical user interaction with the system.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This user interaction flowchart was used to help better understand the problem
and sculpt the concept for the hardware and software design of the speed
control system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;3.0 System Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="control-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The control architecture is a simple feedback design that computes the error
between a user defined setpoint and compares it to the speed of the ebike as
measured via a DC generator wheel speed sensor (more on this in section 5.2).
Figure 2, shows how this error is inputted to the control algorithm encoded in
the Arduino Nano resulting in an output variable used to control the speed of
the ebike.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/BlogPost2ControlArchitecture.jpg" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Control architecture.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="physical-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the heart of the control system’s physical architecture is its integration
into the existing instrumented ebike platform.  Figure 3, below, shows this
integration by highlighting the input/output and geometric relationships
between existing components of the ebike and the additional control system
components.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="System Architecture." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemGeometricLayout.jpg" style="width: 75%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Geometric layout of the system components showing relative size,
location, information flow, and type of each component. Components called
out with a triangle are existing components on the ebike. Components called
out with a circle are components that are introduced to the ebike system to
implement the controller.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The fundamental interaction between the control system and the existing ebike
powertrain system occurs at the interface between the Arduino nano and the
ebike motor controller. While the cruise control is engaged, the function of
the Arduino is to take control of the throttle signal away from the user and
pass it through the control algorithm before sending it to the motor
controller. When the cruise control is disengaged, the Arduino simply reads the
user commanded throttle position and passes it directly to the motor
controller.  Figure 4, below, graphically shows this interaction.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino's Main Function." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoThrottleSchematic.jpg" style="width: 40%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Schematic showing the Arduino’s function as a throttle emulator.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;4.0 Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The control system software was written in C using the Arduino IDE. Based on
user inputs from two momentary pushbuttons, the software decides whether or not
to pass the throttle signal as an output or compute a throttle output based on
the PID controller. The software also updates the user on the current status of
the system via an LCD and logs diagnostic information to an SD card.&lt;/p&gt;
&lt;p&gt;Figure 5, below, shows the logic flow of the code.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Code Logic Flowchart." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemCodeLogicFlowChart.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Code logic flowchart.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The software, and more details about it, can be found on the Laboratorium’s
Github repository &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="code-libraries"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The continuous time PID controller derived in part one of this blog post series
was digitized on the Arduino Nano using Brett Beauregard’s PID_v1 library
&lt;a class="reference external" href="https://github.com/br3ttb/Arduino-PID-Library"&gt;(found here)&lt;/a&gt;. This library
was developed by Brett to implement PID controllers on an Arduino
microcontroller.&lt;/p&gt;
&lt;p&gt;Brett’s library was chosen to implement the PID controller because of its many
robust features such as Derivative Kick and Initialization.  Additionally, this
library contains fantastic documentation which can be &lt;a class="reference external" href="http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid slowing the code’s main loop, interrupts were used to manage the
change in setpoint brought on by a press of the speed increment decrement
buttons. Using interrupts free’s up the Arduino’s processor from having to
check whether or not there’s been a button press on every loop iteration.
Instead, the processor reacts to pin changes and interrupts the execution of
the main code to perform the function tied to the interrupt pin. However, the
Arduino Nano only has a limited number of pins that can be used as interrupts.
A library, written by GreyGnome &lt;a class="reference external" href="https://github.com/GreyGnome/PinChangeInt"&gt;(found here)&lt;/a&gt;, enables the use of interrupts
on any pin of the Arduino Nano.  This library was used to free up pin real
estate for the many components that are wired up to the Arduino.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-hook-up-and-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="instrumented-ebike-platform"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jason Moore, the lab’s PI, originally began constructing the instrumented ebike
platform in 2009 from a large Surly single speed off road steel frame bicycle
converted to an ebike with a conversion kit sold by Amped Bikes. The Amped
Bikes kit consists of a brushless direct drive hub motor driven by a motor
controller and a 36V Li ion battery. More information on the build and the
bike’s instrumentation system can be found in Jason’s dissertation &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Instrumented Ebike." src="https://objects-us-east-1.dream.io/mechmotum/TheInstrumentedEbike.JPG" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. The instrumented ebike today.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="electrical-hook-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The electrical components of the control system revolve around an Arduino Nano
which is used to process inputs and outputs to human interface hardware,
actuators, and logging hardware. Table 1, below, shows a complete list of the
hardware used in this build.&lt;/p&gt;
&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;&lt;em&gt;Table 1. Table of components used in the control system. Prices and sources for each component can be found in the Bill of Materials in section 6.0.&lt;/em&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="40%"/&gt;
&lt;col width="40%"/&gt;
&lt;col width="20%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Component Name&lt;/th&gt;
&lt;th class="head"&gt;Details&lt;/th&gt;
&lt;th class="head"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Arduino Nano&lt;/td&gt;
&lt;td&gt;ATmega328P Processor&lt;/td&gt;
&lt;td&gt;Main   Processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wheel Speed Sensor&lt;/td&gt;
&lt;td&gt;DC generator in contact with rear tire &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;(Click here for more information)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Control Loop Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Voltage Divider&lt;/td&gt;
&lt;td&gt;Used to step down wheel speed sensor voltage to a range measurable by the Arduino&lt;/td&gt;
&lt;td&gt;Wheel Speed Sensor Signal Conditioning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pushbuttons&lt;/td&gt;
&lt;td&gt;Momentary pushbuttons to get user input&lt;/td&gt;
&lt;td&gt;User Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Battery&lt;/td&gt;
&lt;td&gt;7.2V NiCd&lt;/td&gt;
&lt;td&gt;System Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LCD&lt;/td&gt;
&lt;td&gt;16x2 character LCD&lt;/td&gt;
&lt;td&gt;User Feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Motor Controller&lt;/td&gt;
&lt;td&gt;Amped Bikes motor controller&lt;/td&gt;
&lt;td&gt;Control Loop Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SD Card Module&lt;/td&gt;
&lt;td&gt;SPI SD card module for Arduino&lt;/td&gt;
&lt;td&gt;Data Logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 7, below, shows a Fritzing diagram of the electrical system.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Electrical Hookup." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemWiringDiagram.jpg" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7. Fritzing diagram of control system electronics. Note that the
motor controller is represented by a DC motor and the 7.2V NiCd battery is
represented by a 1S LiPo battery.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Arduino Nano and the voltage divider circuits were soldered to a small 3" x
1.1" piece of stripboard. Wires, braided 22AWG, were soldered to the stripboard
to connect the external components to the Nano. Figure 8, below, shows the
completed Arduino board.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Board." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoBoardWiredUp.JPG" style="width: 60%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8. The Arduino board with wires attached.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With many of the components located on the handlebars, a majority of these
wires were routed together along the top tube, up the head tube and stretched
across to the handlebars. This task was facilitated using spiral wound cable
housings, zip ties, and a 15 pin Molex connector. Once on the handlebars, wires
were connected to header pins on the LCD and pushbuttons with Dupont
connectors.&lt;/p&gt;
&lt;p&gt;Rearward of the Arduino, T-tap wire splices were used to cleanly splice power
signals from the NiCd battery above the Arduino near the top tube and from the
wheel speed sensor near the bottom bracket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="electronics-housings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Housings for the Arduino Nano, pushbuttons and LCD were designed and 3D printed
to enclose the electrical components and mount them to the ebike. Figure 9,
below, shows the CAD model design of the Arduino housing. The housing’s design
includes pins for press fitting the Arduino stripboard to the mount. Slots on
the sides and top of the housing allow for wires to exit towards their
destinations on the ebike. Threaded inserts on the base are used to secure the
top cover using M3 screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Housing." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingDesign.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9.  Arduino housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This housing is clamped to the downtube of the ebike by a socket head screw as
shown in Figure 10.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Mounting." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingMountingPoints.JPG" style="width: 80%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 10. Arduino housing mounting point.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Both the LCD and button housings were 3D printed and designed to mount to the
handlebars using a clamshell style mount used for securing GoPro cameras to
bikes. Each mount had a pair of “bunny ears" designed to interface with the
GoPro style mount. The LCD housing, shown in Figure 11 below, is a simple
rectangular two-piece enclosure joined by button head screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LCD Housing." src="https://objects-us-east-1.dream.io/mechmotum/LCDHousingDesign.jpg" style="width: 75%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 11. LCD housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similar to the LCD housing, the button housing is a two-piece, enclosure joined
by screws. Inside the housing is a small piece of stripboard that the
pushbuttons are soldered to. To make pressing the mini momentary pushbuttons
more convenient for the user, larger button parts were 3D printed and offset
from each mini momentary pushbutton using a compression spring as shown in
Figure 12 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingDesign.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 12. Button housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As shown in Figure 13, the button housing is mounted on right side of the
handlebars near the throttle and brake lever for convenient access.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing Mount." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingPosition.JPG" style="width: 80%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 13. Button housing position on the handlebars.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bill-of-materials"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bill of Materials." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemBillofMaterials.jpg" style="width: 100%;"/&gt;
&lt;p class="caption"&gt;&lt;em&gt;Table 2. Bill of materials (BOM) showing each part of project, where it was
purchased, what quantity was purchased and its cost.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned-and-suggested-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;7.0 Lessons Learned and Suggested Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Throughout the process of implementing this controller, I learned some helpful
lessons when it comes to designing electronics  housings and doing electrical
hookups.&lt;/p&gt;
&lt;p&gt;Some lessons learned include the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is important to account for the minimum bend radius of each wire inside of
an electrical enclosure&lt;/li&gt;
&lt;li&gt;It is important to follow &lt;a class="reference external" href="https://www.lulzbot.com/learn/tutorials/heat-set-inserts-tips-and-tricks"&gt;best practices&lt;/a&gt;
when designing for heat set threaded inserts&lt;/li&gt;
&lt;li&gt;Iteration is required in order to achieve a design intent when 3D printing&lt;/li&gt;
&lt;li&gt;Test the assembly and function of electrical connections on scrap wire before
commiting changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout the implementation of this design, I've made note of some
improvements to the system's design that could be made. I have listed these
below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A larger momentary pushbutton could be used to reduce the complexity of the
button housing and improve its functionality&lt;/li&gt;
&lt;li&gt;Use a display that communicates via the SPI protocol to reduce the number of
wires used&lt;/li&gt;
&lt;li&gt;For the Arduino board, use a custom PCB to increase the robustness of the
board&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank &lt;a class="reference external" href="https://github.com/ngchan"&gt;Nicholas Chan&lt;/a&gt; for writing
the camera gimbal software that my speed control software is based off of. I’d
also like to thank &lt;a class="reference external" href="https://github.com/br3ttb"&gt;Brett Beuaregard&lt;/a&gt; for writing
the PID library and it’s excellent documentation that is the heart of the speed
control software. Finally, I’d like to thank Jason Moore for his support and
mentorship throughout this project.&lt;/p&gt;
&lt;p&gt;Stay tuned for part three of this series: Testing and Validation&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="bikes"></category><category term="engineering"></category><category term="controller implementation"></category><category term="arduino"></category></entry><entry><title>Double Pendulum Human Controller Robot: GUI Development</title><link href="https://mechmotum.github.io/blog/double-pendulum-robot.html" rel="alternate"></link><published>2019-02-11T00:00:00-08:00</published><updated>2019-02-11T00:00:00-08:00</updated><author><name>Jonathan Blaze Cubanski</name></author><id>tag:mechmotum.github.io,2019-02-11:/blog/double-pendulum-robot.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a new interface to test different controller
designs for the Double Pendulum Robot.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction-and-background"&gt;
&lt;h2&gt;Introduction and background&lt;/h2&gt;
&lt;p&gt;The Double Pendulum Biomimetic Project has the overarching goal of developing a
desktop-controlled inverted double pendulum with actuators in each joint to
serve as a model for a human balancing on a moving platform (i.e. a
skateboard), where the degrees of freedom is limited to the human’s waist and
ankle joints. This model is illustrated in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image depicting visual model showing the dynamics of the double pendulum robot" src="https://objects-us-east-1.dream.io/mechmotum/pendulum-fbd.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1: Double Pendulum Reference (Photo created by Erich Baur, Todd Sweeney, Jiahao Wei, Greg McDonald)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are two key applications for such a device. Firstly, it can assist in
controller identification, helping bridge the gap between the simulation of
human movements and real-world data collection. Secondly, the project is done
in collaboration with the Dr. Zhaodan Kong and the Cyber Human Physical Systems
Lab— Dr. Kong intends to use the device to demonstrate the fundamentals of
control theory to school students.&lt;/p&gt;
&lt;p&gt;The pendulum hardware was developed previously by EME 185 students, as well as
some preliminary Arduino code to enable robot movement. The primary objectives
were now to bring this hardware to life with UI software with an interactive
GUI for the robot, and improve upon the embedded Arduino code. Additional
objectives included restoring and improving the electromechanical hardware as
needed, and allow data collection from the onboard encoders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-development"&gt;
&lt;h2&gt;Software Development&lt;/h2&gt;
&lt;p&gt;The following presents a high-level overview of the software solutions that
were implemented. To make the code modular and user-friendly, 4 custom
libraries were developed to encapsulate all needed functionality. General
system operation functions and interrupts governing writing PWM signals,
tracking encoder positions, enforcing position limits, and computing system
states were isolated in a general functionality library. A separate library for
controllers allows the user to add or modify controllers for all actuators. In
order to send position and angle commands as a function of time, the user can
directly write mathematical functions into a dedicated position library in
inches, degrees, and seconds. It was determined that the educational value of
the system and the overall functionality would greatly benefit from real-time
gain updates and user control. To facilitate this, a serial processing library
was established and using the IDE Processing, a GUI was created. The GUI, as
shown below, has a startup and swing-up buttons which enable the user to safely
start system operation when ready. The user can select the desired motor
controller and update the gains in real time.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Operating GUI." src="https://objects-us-east-1.dream.io/mechmotum/pendulum-gui.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Operating GUI for Double Pendulum Operation&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results-and-discussion"&gt;
&lt;h2&gt;Results and Discussion&lt;/h2&gt;
&lt;p&gt;The system currently is operating with PID controllers for each actuator and
the aforementioned functionality. The custom designed GUI successfully augments
the controller values and output response of the double pendulum robot. In the
video below, the robot is set to remain positioned perpendicular to the ground
as different external inputs are enacted onto the robot. The different PID
gains inputted into the GUI clearly affect its ability to return to that
position after being offset by external forces. Here is a link to a video that
showcases its performance.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nCciGgxlK24" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="further-work"&gt;
&lt;h2&gt;Further Work&lt;/h2&gt;
&lt;p&gt;The current limiting factors of this system primarily relate to the state of
the hardware and certain design decisions. Testing of serial communication
indicates that there may be a systematic shielding issue, and the
microprocessor should be moved away from high voltage lines. It is also unclear
if the code is operating fast enough to achieve optimal performance. Thorough
testing of performance while increasing the delay between each loop is needed
to understand the effects of this. Including a feature to allow enter custom
controller algorithms to save, access and port these into the microcontroller
was also difficult to achieve within the time constraints allotted.&lt;/p&gt;
&lt;p&gt;Data collection using a serial monitoring application is currently possible by
printing encoder data to the terminal, however, this slows down the code since
serial writing is relatively slow. Without a clear understanding of the effects
of changing loop time, it is not possible to draw clear conclusions about the
implications of this. A viable solution would be to have a second Arduino
running in parallel which only prints serial data and does not command the
robot. More testing is needed.&lt;/p&gt;
&lt;p&gt;Here is the link to our GitHub Repository where you can find the Arduino .ino
code, the custom libraries to operate the robot, and the Processing IDE code
for the GUI controller.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mechmotum/DoublePendulumCode"&gt;https://github.com/mechmotum/DoublePendulumCode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="This image displays the two students that worked on this project over the Fall 2018 Quarter, Dorian Crutcher and Jonathan Blaze Cubanski" src="https://objects-us-east-1.dream.io/mechmotum/dorian-blaze.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3: Left: Dorian Crutcher   Right: Jonathan Blaze Cubanski&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="controller"></category><category term="double pendulum"></category><category term="gui"></category></entry><entry><title>BMD, ISSS, and ISB/ASB Abstract Submissions</title><link href="https://mechmotum.github.io/blog/bmd-isss-isb-asb-abstracts.html" rel="alternate"></link><published>2019-02-01T00:00:00-08:00</published><updated>2019-02-01T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-02-01:/blog/bmd-isss-isb-asb-abstracts.html</id><summary type="html">&lt;p class="first last"&gt;Blog post to share recent conference abstract submissions.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The lab has just submitted a series of abstracts for three upcoming conferences
in 2019.&lt;/p&gt;
&lt;p&gt;We submitted an abstract on the &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;soon to be submitted rowing biomechanics paper&lt;/a&gt; to the &lt;a class="reference external" href="https://isb2019.com"&gt;International Society of Biomechanics &amp;amp;
American Society of Biomechanics meeting&lt;/a&gt; in Calgary in
late July.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Adaptive smartphone-based sensor fusion for estimating competitive rowing
kinematic metrics&amp;quot; is on work done by undergraduates Bryn Cloud, Britt
Tarien, Ada Liu, and Thomas Shedd during 2018. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/isb2019-abstract.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also submitted three abstracts to the &lt;a class="reference external" href="https://bmd2019.org/"&gt;Bicycle and Motorcycle Dynamics
conference in Padova, Italy&lt;/a&gt; in September.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Practical Realization of a Theoretical Optimal-Handling Bicycle&amp;quot; is on work
done by undergraduate Roy Gilboa this past summer.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-gilboa.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Design of an Electric Bicycle Speed Controller&amp;quot; is on work done by
undergraduate Trevor Metz since this past June.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-metz.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Expanded Optimization for Discovering Optimal Lateral Handling Bicycle&amp;quot; is
on work Mont, Ron, and I are continuing on optimal handling bicycles.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-moore.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, we submitted an abstract on our work about ski jump design to the
&lt;a class="reference external" href="https://www.isss2019.com/"&gt;International Society of Skiing Safety meeting&lt;/a&gt;
at Squaw Valley in April.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Accessible, Open-source Computational Analysis and Design of Terrain Park
Ski Jumps&amp;quot; based on work done by Bryn Cloud, Britt Tarien, Mont Hubbard and
me. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/isss2019-abstract.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are crossing our fingers for acceptance! Thanks for all the hard work from
the students!&lt;/p&gt;
</content><category term="conferences"></category><category term="sports"></category><category term="biomechanics"></category><category term="bicycles"></category><category term="handling"></category><category term="optimization"></category><category term="design"></category><category term="mechatronics"></category><category term="ski"></category></entry><entry><title>Estimating Competition Rowing Metrics</title><link href="https://mechmotum.github.io/blog/estimating-rowing-metrics.html" rel="alternate"></link><published>2019-01-18T13:25:00-08:00</published><updated>2019-01-18T13:25:00-08:00</updated><author><name>Bryn Cloud</name></author><id>tag:mechmotum.github.io,2019-01-18:/blog/estimating-rowing-metrics.html</id><summary type="html">&lt;p class="first last"&gt;Our paper on the sensor fusion of iPhone sensor streams is
currently available for preprint at &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;https://engrxiv.org/nykuh&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This blog post provides a brief description of the primary ideas and results
that will be found in the paper, &amp;quot;Adaptive smartphone-based sensor fusion for
estimating competitive rowing kinematic metrics&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal&lt;/h2&gt;
&lt;p&gt;Competitive rowing highly values boat position and velocity data for real-time
feedback during training, racing and post-training analysis.  The ubiquity of
smartphones with embedded position (GPS) and motion (accelerometer) sensors
motivates their possible use in these tasks. We investigate the use of two
real-time digital filters to achieve extremely accurate but reasonably priced
measures of boat speed and distance per stroke.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Rowers are primarily concerned with maximizing the speed of their boat and the
distance they can cover in each stroke. For this reason, we focus on increasing
the accuracy of these two metrics. The GPS from the iPhone samples about once
every three seconds, so there is not enough resolution to see what happens
within a stroke (which takes about 2 seconds). The accelerometer has an
acceptable sampling frequency of 100 Hz, but since rowers are interested in
speed and position, it must be integrated or double integrated which introduces
a steep low-frequency drift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div class="section" id="complementary-filter"&gt;
&lt;h3&gt;Complementary Filter&lt;/h3&gt;
&lt;p&gt;The integrated acceleration is high-pass filtered to get rid of the
low-frequency drift, but keeps the high-frequency resolution within each
stroke. The GPS is low-pass filtered to get rid of any high-frequency noise.
These two signals are then summed together.&lt;/p&gt;
&lt;p&gt;To get a more accurate result, we apply a linear extrapolation of the previous
two GPS position points to get a more accurate prediction between the 0.3 Hz
data points.&lt;/p&gt;
&lt;p&gt;We use an optimization on each of our 16 data files to generate the optimal low
and high cutoff frequencies. We are then able to use the average values over
all runs in the filter. With the cutoff frequencies already built in, the
filter only needs the previous two data points to operate and runs in real
time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kalman-filter"&gt;
&lt;h3&gt;Kalman Filter&lt;/h3&gt;
&lt;p&gt;The Kalman filter algorithm fuses data collected from different sensors with
the outputs of a predictive dynamic physical model to estimate the target
time-varying variables of interest, known as states. In our case, the
body-fixed longitudinal acceleration of the boat is measured and used as an
input to a kinematic model to predict the displacement and speed of the boat
along its path. The predictions are then compared with the smartphone
GPS-derived distance traveled and speed measurement and the error is used as
feedback to adjust the estimation in real time. The Kalman gain can be tuned to
balance the sensor and model uncertainty to achieve optimal accuracy.&lt;/p&gt;
&lt;p&gt;The smartphone's accelerometer axis is not, in general, parallel to the boat's
horizontal travel path. If we want to use the smartphone acceleration for the
kinematic model, we must compensate for the sensor misalignment along with
varying boat pitch during rowing. This can be done by augmenting the
accelerometer's reading (&lt;span class="math"&gt;\(\phi_k\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Therefore, the kinematic model for the Kalman Filter is as follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
d_{k+1} = d_k+ v_k \Delta t \\
v_{k+1} = v_k + (\alpha_{y,k} - \phi_k) \Delta t
\end{align*}
&lt;/div&gt;
&lt;p&gt;This bias term now becomes a new state to be estimated by the filter which will
effectively account for drift due to integration error accumulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-validation"&gt;
&lt;h3&gt;Experimental Validation&lt;/h3&gt;
&lt;p&gt;We used a differential GPS system (accurate to ~3mm) to define our &amp;quot;ground
truth&amp;quot; data.  We simultaneously logged data on the differential GPS and the
iPhone while a rower performed passes at various speeds up and down a lake. We
collected data on two different rower-boat configuration: a single scull boat
(one seat) with an elite rower, and a double scull boat (two seats) with a
single amateur rower.  These offered two very different styles of rowing, so if
our filters can perform well on both, then we know they are robust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;The figure below compares the distance per stroke estimation computed from the
smartphone GPS, complementary filter, and Kalman filter through the relative
error with respect to the the distance per stroke computed from the
differential GPS measurements.&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/dps.png" style="width: 50%;" /&gt;
&lt;p&gt;Example boat speed estimates over 30 seconds during a typical trial comparing
smartphone GPS derived speed and the complementary filter and Kalman filter
outputs against the differential GPS is shown in Figure 2.  RMSE is calculated
with respect to the sampling rate of the accelerometer, 100 Hz.&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/speed-example.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;We have presented two methods to estimate the speed and distance per stroke
along a rowing boat's path in real time that provide high accuracy and
precision from the relatively low accuracy sensors from a single smartphone
attached to the boat. These estimates provide an intimate view of the rower's
performance. These improved estimates can be used to create a more detailed
analysis of the rower's performance. Specifically, we show that the distance
per stroke can be estimated to an accuracy of 50~si{centimeter}, which is an
improvement over smartphone estimates but still insufficient for detailed
stroke-by-stroke level differentiation of boats in a racing event with
relatively close elapsed times.  Additionally, the inter-stroke view of boat
speed that our methods provide are better than any inexpensive commercial
on-board boat speed measurement device and compares favorably to very accurate
differential GPS systems without the need for more than one GPS receiver.&lt;/p&gt;
&lt;p&gt;The complementary filter has a disadvantage in that the filter cutoff
frequencies aren't updated to optimal values in real time, and the optimal
offline values we make use of do not robustly handle all stroke rates for the
two rowers and boats used. This makes the Kalman filter more attractive because
the bias term is adaptively updated for every rower and boat. The filter tunes
itself. Both filters take time to converge to a steady error from a zero speed
start, so the first strokes in a race will produce less accurate results. A
future study could look into minimizing the startup time by tuning the filters
further, but there is likely a tradeoff in accuracy and precision of the
estimations.&lt;/p&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Preprint: &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;https://engrxiv.org/nykuh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/mechmotum/row_filter"&gt;https://gitlab.com/mechmotum/row_filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="papers"></category><category term="rowing"></category><category term="sports"></category><category term="engineering"></category><category term="estimation"></category><category term="kalman filter"></category></entry><entry><title>Finding the Efficiency of the Xylem and Money Maker Treadle Pumps</title><link href="https://mechmotum.github.io/blog/treadle-pump-experiment.html" rel="alternate"></link><published>2018-12-27T00:00:00-08:00</published><updated>2018-12-27T00:00:00-08:00</updated><author><name>Aaron Shaw</name></author><id>tag:mechmotum.github.io,2018-12-27:/blog/treadle-pump-experiment.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on conducting efficiency experiments with treadle pumps.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Small scale farmers use human-powered water pumps in rural areas to increase
crop yields beyond subsistence levels. Different designs utilize various
biomechanical motions. One of the most popular and proven designs for
human-powered water pumps is the treadle pump, which is operated via a stepping
motion (Figure 1).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Treadle Example." src="https://objects-us-east-1.dream.io/mechmotum/treadle-example.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A user &amp;quot;treadles&amp;quot; on the Money Maker treadle pump.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The treadle pump is an inexpensive and portable irrigation tool. According to
International Development Enterprises (IDE), treadle pumps helped farmers in
Bangladesh increase their income by an average of $100 a year. This increase in
profit allowed farmers to invest in larger, more expensive irrigation machines
that further increased crop yields and helped create financial stability
&lt;a class="citation-reference" href="#polak" id="id1"&gt;[Polak]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A prototype pedal-powered centrifugal water pump was tested by Abe McKay during
his Master’s studies &lt;a class="citation-reference" href="#mckay" id="id2"&gt;[McKay]&lt;/a&gt;. Mckay’s tests suggested that this pump’s
efficiency was comparable to that of the commercially available Xylem and Money
Maker treadle pumps. Detailed efficiency data for these treadle pumps are not
available and thus an accurate comparison could not be made until now.&lt;/p&gt;
&lt;p&gt;For our experiment, we gathered efficiency data from the Xylem and Money Maker
treadle pumps and compared them to McKay’s data on the prototype Buffalo pump.
By comparing the efficiency of the Buffalo pump to the commercially available
Xylem and Money Maker pumps, we can evaluate the prototype’s potential for
success as a low cost tool for small scale irrigation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="methods"&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;McKay had conducted an efficiency test with the centrifugal pump so our goal
was to conduct a similar test with our treadle pumps in order to produce data
that could be compared. We conducted fifteen tests, with three replicates at
each pressure head between 1 and 5 meters. We pumped 20 liters of water for
each test. We measured time using a photoresistor that was covered and
uncovered (on/off) to record the beginning and end of each test. The DAQ
apparatus including photoresistor circuit, sensor wires, and LabJack is shown
in Figure 2 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="DAQ Setup." src="https://objects-us-east-1.dream.io/mechmotum/daq-setup.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. The LabJack was kept dry and out of danger behind the treadle pump.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Force sensors were designed using steel plates and two 200 kg rated load cells.
The load cells were mounted between steel plates and then mounted on the
treadle pump lever arms with U-bolts. We calibrated the force sensor using
Olympic weights and a balance scale for reference. The power meter apparatus
consisting of the force sensors and angular rate gyro are shown below in Figure
3.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Treadle Pump Setup." src="https://objects-us-east-1.dream.io/mechmotum/treadle-pump-setup.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. The Xylem treadle pump with force sensor and angular rate gyro attached&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We measure force and angular rate using the force sensors and the angular rate
gyro respectively. Using our force measurements, we were able to calculate
torque using the equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\tau = F \times r
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(F\)&lt;/span&gt; is the force in Newtons applied to the lever arm perpendicular
to the arm. The radius &lt;span class="math"&gt;\(r\)&lt;/span&gt; is the distance from the point of applied
force to the lever arm’s center of rotation. Using torque and angular rate
measurements from the angular rate gyro, power in watts is calculated using the
equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
P = \tau \times \omega
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where torque 𝛕 is in Newton-meters and angular velocity 𝛚 is in
radians per second. Time required to fill the 20 liter bucket was measured and
used to calculate flow rate. Hydraulic power could then be calculated using the
equation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Hydraulic Power} = q \times \rho \times g \times h
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Simplifying for water, where density equals 1 kilogram per liter:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Hydraulic Power} = q \times g \times h
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(q\)&lt;/span&gt; is measured in liters per second, &lt;span class="math"&gt;\(g\)&lt;/span&gt; is 9.81 meters per
second squared, and &lt;span class="math"&gt;\(h\)&lt;/span&gt; is vertical pressure head measured in meters.
Efficiency can be calculated using the equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\eta = \frac{\textrm{Hydraulic Power}} {\textrm{Input Power}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hazen efficiency is determined by calculating the friction head loss using the
Hazen-Williams equation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Frictional Head Loss} =
  \frac{\textrm{Pipe Length} \times 10.67 \times (\textrm{flow rate})^{1.852}}
       {(\textrm{Hazen Roughness})^{1.852} \times d^{4.8704}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hydraulic power is adjusted using this estimated friction head. A Hazen
efficiency can then determined.&lt;/p&gt;
&lt;p&gt;Each test began with one person priming the pump in order to achieve consistent
water flow. The collector would deliver the pumped water into an overflow
bucket until the experiment began. At the start of the experiment the treadler
would remove a piece of paper covering the photoresistor. Simultaneously, the
collector would transfer the outlet hose to the 20 L metered collection bucket.
During the data collection, the treadler would attempt to maintain an average
of 100 Watts. This was done by feel only and therefore resulted in some
deviation from the target power. The experiment ended when the collector
signaled to the treadler that 20 L was reached, at which point the
photoresistor was covered and the data collection complete. The data was
collected via a MATLAB program and saved after each trial. 15 trials were
completed: three at each meter interval between 1 and 5 meters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="1m Trials." src="https://objects-us-east-1.dream.io/mechmotum/1m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="2m Trials." src="https://objects-us-east-1.dream.io/mechmotum/2m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3m Trials." src="https://objects-us-east-1.dream.io/mechmotum/3m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="4m Trials." src="https://objects-us-east-1.dream.io/mechmotum/4m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="5m Trials." src="https://objects-us-east-1.dream.io/mechmotum/5m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The figures 4-8 above show the calculated efficiencies for each pump at
different pressure heads across all trials. The average efficiencies are
graphed in figure 9 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Average Efficiency." src="https://objects-us-east-1.dream.io/mechmotum/average-efficiency.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 9 shows the efficiency trends across different pressure heads for each
pump. The average efficiency was found by finding the mean across the three
trial tests at each pressure head. The effect that the variation in power may
have had on efficiency was assumed to be negligible. The trendlines and
corresponding equations are shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;There is a variation in average power within each testing group that must be
acknowledged. Because the average power for each testing group was not held
constant, we must consider the relationship between power and efficiency. When
the trendlines for each testing group are observed, our data does not suggest a
strong relationship between average power and efficiency within a given
pressure head. More data points and a dedicated testing procedure would help
validate this claim, but the observed results are enough to make the assumption
that the effect of any hypothetical correlation is negligible given the range
over which average power varied during our tests. Therefore, the average
efficiencies can be compared between pumps where pressure head is held constant
despite fluctuating average power measurements across trials.&lt;/p&gt;
&lt;p&gt;Figure 9 shows the average efficiencies for each pump at various pressure
heads. The centrifugal Buffalo pump has a negatively sloped trendline whereas
the treadle pumps have positively sloped trendlines when observed between our
range of pressure heads. The Xylem pump surpasses the efficiency of the Buffalo
pump around 4.5 meters pressure head. The Money Maker pump can be predicted to
surpass the efficiency of the Buffalo pump at around 5.5 meters pressure head.
The Xylem and Money Maker pumps share a similar relationship between increased
pressure head and increased efficiency. There is a difference in slope between
the two trendlines of 0.54. Due to shared mechanical properties, all
treadle-type pumps most likely produce similarly sloped trendlines. The
centrifugal Buffalo pump is a completely different design, and thus its
efficiency can be predicted along a completely different trendline.&lt;/p&gt;
&lt;p&gt;The Buffalo pump is determined to be 21% (𝛔 = 6.7%) more efficient at 1
meter pressure head than the Xylem pump, and 32% (𝛔 = 4.9%) more
efficient at the same head when compared to the Money Maker. At 2 meters
pressure head, the Buffalo pump was 17.0% (𝛔 = 2.9%) and 24.7% (𝛔 =
2.4%) more efficient than the Xylem and Money Maker respectively. At 3 meters
head, it was 16.3% (𝛔 = 3.8%) and 26% (𝛔 = 4.1%) more efficient
respectively. At 4 meters, the differences decreased to 2.2% (𝛔 = 4.6%)
and 9.7% (𝛔 = 4.6%). At 5 meters the Xylem pump was 6.8% (𝛔 = 4.9%)
more efficient than the Buffalo pump and the Money Maker was only 2% (𝛔 =
3.7%) less efficient than the Buffalo.&lt;/p&gt;
&lt;p&gt;Until the correlation between power and efficiency can be determined, these
conclusions include an error assumed to be negligible. It is within the best
interest of further research to try and describe this correlation, which may
appear something like this:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Efficiency} = C \times \textrm{Power} + B
\end{equation*}
&lt;/div&gt;
&lt;p&gt;For low C values (&amp;lt;&amp;lt;1), our assumption can be considered valid. Our current
assumption is that C=0, where efficiency is not a function of power. It would
also be beneficial to direct further research at determining the range of
pressure heads most frequently encountered in real world irrigation situations.
This information will be critical in determining which human powered water pump
is the most efficient for its given application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Our research finds that the Buffalo pump is more efficient than the Xylem
treadle pump up to 4.5 meters pressure head, and the Money Maker up to 5.5
meters pressure head. The efficiency advantage of one type of pump over another
will depend largely on pressure head. Figure 9 shows the efficiency trends
between two treadle style pumps and a centrifugal-type water pump.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;table class="docutils citation" frame="void" id="polak" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[Polak]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;P. Polak, &amp;quot;How IDE Installed 1.5 Million Treadle Pumps in
Bangladesh by Activating the Private Secotr: The Practical Steps,&amp;quot;
International Development Enterprises (IDE), 2000.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mckay" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[McKay]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A. Mckay. (2018), &amp;quot;The Water Buffalo: Design of a Portable Bicycle
Powered Irrigation Pump for Small-Scale African Farmers&amp;quot; UC Davis, Davis,
California&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="efficiency"></category><category term="treadle pump"></category><category term="engineering"></category><category term="biomechanics"></category><category term="appropriate&#10;technology"></category></entry><entry><title>Design of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-design.html" rel="alternate"></link><published>2018-12-15T00:00:00-08:00</published><updated>2018-12-15T00:00:00-08:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2018-12-15:/blog/ebike-controller-design.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on designing a speed controller for an instrumented ebike.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The goal of this project is to design and implement a control system for an
instrumented ebike used in bicycle handling experimentation. To achieve this, a
basic unity feedback control architecture (Figure 1) is employed.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-01.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Control architecture where e is the error between the actual
speed v of the ebike and the desired speed, vd, and V is the DC input
voltage to the ebike plant model. Gc and Gp represent the controller and
plant model respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The goal of the controller is to track a setpoint speed, within +/- 0.10 m/s,
set by the rider.  To achieve this, a PID controller was tuned using MATLAB’s
Control System Toolbox. The ebike plant model was derived using first
principles and grey box system identification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeling-the-ebike-from-first-principles"&gt;
&lt;h2&gt;Modeling the eBike From First Principles&lt;/h2&gt;
&lt;p&gt;The dynamics of the ebike powertrain and the vehicle itself can be modeled from
first principles. The powertrain of the ebike consists of a standard ebike
conversion kit motor controller and a brushless 3 phase direct drive induction
motor mounted to the rear hub of the bike. A simple diagram of the ebike
drivetrain is shown below in Figure 2.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ebike Drivetrain Diagram." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-02.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Diagram of the drivetrain circuit and dynamics.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In Figure 2, the induction motor is approximated by a model of a DC motor
circuit with resistance &lt;span class="math"&gt;\(R\)&lt;/span&gt;, inductance &lt;span class="math"&gt;\(L\)&lt;/span&gt; and back emf
&lt;span class="math"&gt;\(V_b\)&lt;/span&gt;. The torques &lt;span class="math"&gt;\(T_m\)&lt;/span&gt; and &lt;span class="math"&gt;\(T_p\)&lt;/span&gt; acting on the motor shaft
correspond to motor torque and wheel propulsion torque respectively. The
rotational dynamics of the drivetrain are defined by Euler’s rotation equation.&lt;/p&gt;
&lt;p&gt;A simple equation of motion for the bicycle, modeled as a point mass, is
derived using Newton’s 2nd Law of Motion in the horizontal direction &lt;a class="citation-reference" href="#wilson" id="id1"&gt;[Wilson]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Free Body Diagram of Bicycle." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-03.jpg" style="width: 20%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Free body diagram of the bicycle modeled as a point mass. Fa, Fr
and Fp are the aerodynamic drag, rolling resistance and propulsive forces
respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Together, the vehicle and drivetrain dynamics of the ebike can be shown in a
state space representation with state variables &lt;span class="math"&gt;\(i(t)\)&lt;/span&gt; and &lt;span class="math"&gt;\(x(t)\)&lt;/span&gt;
as seen below.&lt;/p&gt;
&lt;img alt="State Space Representation of the eBike." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-04.jpg" style="width: 55%;" /&gt;
&lt;p&gt;From the state space representation, a transfer function from input DC voltage
&lt;span class="math"&gt;\(V\)&lt;/span&gt; to output speed &lt;span class="math"&gt;\(v\)&lt;/span&gt; is formed:&lt;/p&gt;
&lt;img alt="Plant Model Transfer Function." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-05.jpg" style="width: 80%;" /&gt;
&lt;p&gt;This plant model is a second order transfer function relating an applied DC
voltage input to the ebike’s motor controller to the output speed of the ebike.
This model represents an approximation of the true plant model of the ebike. To
get a more accurate plant model, a grey box system identification procedure
based on measured time response data from the ebike was used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="performing-system-identification-from-experimental-data"&gt;
&lt;h2&gt;Performing System Identification From Experimental Data&lt;/h2&gt;
&lt;p&gt;To begin the process of system identification, the values of the ebike
drivetrain model parameters and bicycle drag and tire rolling resistance
coefficients were initialized using reasonable approximations found from
internet searches, previous knowledge of the instrumented ebike &lt;a class="citation-reference" href="#moore" id="id2"&gt;[Moore]&lt;/a&gt; and
textbook resources &lt;a class="citation-reference" href="#wilson" id="id3"&gt;[Wilson]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In MATLAB, a nonlinear least-squares solver was used to optimize the constants
in the derived plant model of the ebike to match a speed time response measured
from the instrumented ebike. Figure 4, below, shows the curve fitting result.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Curve Fitting Results." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-06.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Result of the least-squares curve fitting.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 4 shows that the plant model of ebike was reasonably identified using
the least-squares curve fitting method. The resulting ebike plant model is:&lt;/p&gt;
&lt;img alt="Identified Plant Model." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-07.jpg" style="width: 90%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="controller-design-in-matlab"&gt;
&lt;h2&gt;Controller Design in MATLAB&lt;/h2&gt;
&lt;p&gt;With the plant model of the ebike identified, a PID controller (kp = 68.5, ki =
106, kd = 1.44) was tuned for zero steady state error and reasonable transient
behavior using MATLAB’s Control System Toolbox.&lt;/p&gt;
&lt;p&gt;The closed loop step response (Figure 5) shows that the controller meets the
design goals with zero steady state error, a settling time of 1.56s, and an
overshoot percentage of 10.45%.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Closed Loop System Step Response." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-08.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Closed Loop System Step Response.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation-of-controller-robustness"&gt;
&lt;h2&gt;Evaluation of Controller Robustness&lt;/h2&gt;
&lt;p&gt;MATLAB’s Robust Control Toolbox was used to test the robustness of the closed
loop system with regards to uncertainties in the coefficients of the identified
ebike plant model. The constants in the derived ebike plant model were lumped
together forming the following simplified plant model:&lt;/p&gt;
&lt;img alt="Simplified Plant Model." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-09.jpg" style="width: 90%;" /&gt;
&lt;p&gt;The constants &lt;span class="math"&gt;\(a\)&lt;/span&gt;, &lt;span class="math"&gt;\(b\)&lt;/span&gt;, &lt;span class="math"&gt;\(c\)&lt;/span&gt;, and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in the above
transfer function were defined in MATLAB as real-uncertain parameters with
varying percentage based uncertainties about their nominal values. The nominal
values of each coefficient were taken from the result of the system
identification step of the controller design process.  Figure 6, below, shows
the nominal closed loop and open loop system step response with 20 random
samples of the uncertain plant model defined by the uncertain coefficients.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Uncertain Step Response." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-10.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. Step response of the nominal closed loop system with 20 random
samples of the uncertain closed loop step response superimposed on the
plot.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 6 shows that the closed loop system is reasonably robust despite
uncertainty in the plant model. Having this robustness in the control system
means that small changes in the dynamics of the ebike will not cause the
controller to have undesirable performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A simple PID controller used in a unity feedback control architecture was
designed to reduce the steady state error and improve the transient performance
of the speed time response of an instrumented ebike. Using grey box system
identification, the plant model of the ebike was identified and used in the
controller design. A PID tuner app was used to tune the controller constants to
achieve zero steady state gain and favorable transient behavior. Finally, the
robustness of the controller was tested by simulating uncertainties in the
closed loop system.&lt;/p&gt;
&lt;p&gt;The next step in the project is to take the continuous time PID controller and
implement it digitally on the instrumented ebike. Stay tuned for part two:
Implementing a PID Controller on an Instrumented Ebike.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="wilson" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[Wilson]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id3"&gt;2&lt;/a&gt;)&lt;/em&gt; Wilson, D., Papadopoulos, J. and Whitt, F. (2004). Bicycling science.
Cambridge, Mass.: MIT Press.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="moore" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[Moore]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Moore, J. (2012). Human Control of a Bicycle.
Available at: &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;http://moorepants.github.io/dissertation/davisbicycle.html&lt;/a&gt;
[Accessed 12 Dec. 2018].&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="controls"></category><category term="instrumentation"></category><category term="engineering"></category><category term="mechatronics"></category><category term="bicycle"></category></entry><entry><title>Co-awarded $5M to build interactive STEM Open Educational Resources</title><link href="https://mechmotum.github.io/blog/libretexts-grant.html" rel="alternate"></link><published>2018-10-05T00:00:00-07:00</published><updated>2018-10-05T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2018-10-05:/blog/libretexts-grant.html</id><summary type="html">&lt;p class="first last"&gt;Lab co-awardees of $5M Department of Education Grant&lt;/p&gt;
</summary><content type="html">&lt;p&gt;An inaugural &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;$5M grant&lt;/a&gt; from the Department of Education was awarded to UC
Davis to further the &lt;a class="reference external" href="http://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; project over the next three years. LibreTexts'
mission is to develop free open access textbooks for STEM disciplines. The
grant will support work at UC Davis and 11 other institutions around the
country. The project is led by Prof. Delmar Larsen in the UC Davis Chemistry
department. Jason K. Moore is a co-pi will lead efforts to enable interactive
computation in the text books and develop engineering open educational
resources. For more information see the LibreTexts &lt;a class="reference external" href="https://libretexts.org/pressRelease.html"&gt;press release&lt;/a&gt; and an
&lt;a class="reference external" href="https://www.insidehighered.com/digital-learning/article/2018/10/02/department-education-awards-pilot-oer-grant-uc-davis-open"&gt;article&lt;/a&gt; in Inside Higher Ed.&lt;/p&gt;
</content><category term="grants"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category></entry><entry><title>JOSS Paper On Ski Jump Design Software Published</title><link href="https://mechmotum.github.io/blog/skijumpdesign-published.html" rel="alternate"></link><published>2018-08-20T00:00:00-07:00</published><updated>2018-08-20T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2018-08-20:/blog/skijumpdesign-published.html</id><summary type="html">&lt;p class="first last"&gt;Our paper on the ski jump design software is published in the Journal
of Open Source Software.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="http://joss.theoj.org"&gt;Journal of Open Source Software&lt;/a&gt; accepted and published our paper
&amp;quot;skijumpdesign: A Ski Jump Design Tool for Specified Equivalent Fall Height&amp;quot;
which describes an open source software library and hosted web app for
designing ski jumps with a specified equivalent fall height. The paper can be
viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.21105/joss.00818"&gt;https://doi.org/10.21105/joss.00818&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you'd like to check out the web app, click the image below:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.skijumpdesign.info"&gt;&lt;img alt="Screenshot of the application." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum.github.io/skijumpdesign-screenshot.jpg" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web application: &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/moorepants/skijumpdesign"&gt;https://gitlab.com/moorepants/skijumpdesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software documentation: &lt;a class="reference external" href="http://skijumpdesign.readthedocs.io"&gt;http://skijumpdesign.readthedocs.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="papers"></category><category term="ski"></category><category term="sports"></category><category term="engineering"></category><category term="safety"></category></entry></feed>